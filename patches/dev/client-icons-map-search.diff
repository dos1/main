diff --git a/options/default.xml b/options/default.xml
index 792fed3..bf0f598 100644
--- a/options/default.xml
+++ b/options/default.xml
@@ -166,6 +166,7 @@
 				<show-mood-icons type="bool">true</show-mood-icons>
 				<show-tune-icons type="bool">true</show-tune-icons>
 				<show-client-icons type="bool">true</show-client-icons>
+				<show-all-client-icons type="bool">false</show-all-client-icons>
 				<toolbars/>
 				<toolbars-state type="QByteArray"/>
 				<use-left-click type="bool">false</use-left-click>
diff --git a/src/options/opt_appearance.cpp b/src/options/opt_appearance.cpp
index 1286892..32320dc 100644
--- a/src/options/opt_appearance.cpp
+++ b/src/options/opt_appearance.cpp
@@ -95,6 +95,7 @@ OptionsTabIconset::OptionsTabIconset(QObject *parent) : MetaOptionsTab(parent, "
 {
 	addTab( new OptionsTabIconsetEmoticons(this) );
 	addTab( new OptionsTabIconsetMoods(this) );
+	addTab( new OptionsTabIconsetClients(this) );
 	addTab( new OptionsTabIconsetRoster(this) );
 	addTab( new OptionsTabIconsetSystem(this) );
 }
diff --git a/src/options/opt_iconset.cpp b/src/options/opt_iconset.cpp
index 023c659..d978e4a 100644
--- a/src/options/opt_iconset.cpp
+++ b/src/options/opt_iconset.cpp
@@ -24,6 +24,7 @@
 
 #include "ui_opt_iconset_emo.h"
 #include "ui_opt_iconset_mood.h"
+#include "ui_opt_iconset_client.h"
 #include "ui_opt_iconset_system.h"
 #include "ui_opt_iconset_roster.h"
 #include "ui_ui_isdetails.h"
@@ -40,6 +41,12 @@ public:
 	IconsetMoodUI() : QWidget() { setupUi(this); }
 };
 
+class IconsetClientUI : public QWidget, public Ui::IconsetClient
+{
+public:
+	IconsetClientUI() : QWidget() { setupUi(this); }
+};
+
 class IconsetSystemUI : public QWidget, public Ui::IconsetSystem
 {
 public:
@@ -804,6 +811,154 @@ void OptionsTabIconsetMoods::cancelThread()
 }
 
 //----------------------------------------------------------------------------
+// OptionsTabIconsetClients
+//----------------------------------------------------------------------------
+
+OptionsTabIconsetClients::OptionsTabIconsetClients(QObject *parent)
+	: OptionsTab(parent, "iconset_clients", "", tr("Clients"), tr("Select your clients iconset"))
+	, w(0)
+	, thread(0)
+{
+}
+
+OptionsTabIconsetClients::~OptionsTabIconsetClients()
+{
+	cancelThread();
+}
+
+QWidget *OptionsTabIconsetClients::widget()
+{
+	if ( w )
+		return 0;
+
+	w = new IconsetClientUI;
+	IconsetClientUI *d = (IconsetClientUI *)w;
+
+	connect(d->pb_clientDetails, SIGNAL(clicked()), SLOT(previewIconset()));
+
+	return w;
+}
+
+void OptionsTabIconsetClients::applyOptions()
+{
+	if ( !w || thread )
+		return;
+
+	IconsetClientUI *d = (IconsetClientUI *)w;
+
+	const Iconset *is = d->iss_clients->iconset();
+	if ( is ) {
+		QFileInfo fi( is->fileName() );
+		PsiOptions::instance()->setOption("options.iconsets.clients", fi.fileName());
+	}
+}
+
+void OptionsTabIconsetClients::restoreOptions()
+{
+	if ( !w || thread )
+		return;
+
+	IconsetClientUI *d = (IconsetClientUI *)w;
+
+	d->iss_clients->clear();
+	QStringList loaded;
+
+	d->setCursor(Qt::WaitCursor);
+
+	QPalette customPal = d->palette();
+	customPal.setCurrentColorGroup(QPalette::Inactive);
+	d->iss_clients->setEnabled(false);
+	d->iss_clients->setPalette(customPal);
+
+	d->pb_clientDetails->setEnabled(false);
+	d->pb_clientDetails->setPalette(customPal);
+
+	d->progress->show();
+	d->progress->setValue( 0 );
+
+	numIconsets = countIconsets("/clients", loaded);
+	iconsetsLoaded = 0;
+
+	cancelThread();
+
+	thread = new IconsetLoadThread(this, "/clients");
+	thread->start();
+}
+
+bool OptionsTabIconsetClients::event(QEvent *e)
+{
+	IconsetClientUI *d = (IconsetClientUI *)w;
+	if ( e->type() == QEvent::User ) { // iconset load event
+		IconsetLoadEvent *le = (IconsetLoadEvent *)e;
+
+		if ( thread != le->thread() )
+			return false;
+
+		if ( !numIconsets )
+			numIconsets = 1;
+		d->progress->setValue( (int)((float)100 * ++iconsetsLoaded / numIconsets) );
+
+		Iconset *i = le->iconset();
+		if ( i ) {
+			PsiIconset::instance()->stripFirstAnimFrame(i);
+			d->iss_clients->insert(*i);
+
+			QFileInfo fi( i->fileName() );
+			if ( fi.fileName() == PsiOptions::instance()->getOption("options.iconsets.clients").toString() )
+				d->iss_clients->setItemSelected(d->iss_clients->lastItem(), true);
+
+			delete i;
+		}
+
+		return true;
+	}
+	else if ( e->type() == QEvent::User + 1 ) { // finish event
+		d->iss_clients->setEnabled(true);
+		d->iss_clients->setPalette(QPalette());
+
+		d->pb_clientDetails->setEnabled(true);
+		d->pb_clientDetails->setPalette(QPalette());
+
+		connect(d->iss_clients, SIGNAL(currentItemChanged(QListWidgetItem*, QListWidgetItem*)), SIGNAL(dataChanged()));
+
+		d->progress->hide();
+
+		d->unsetCursor();
+		thread = 0;
+
+		return true;
+	}
+
+	return false;
+}
+
+void OptionsTabIconsetClients::previewIconset()
+{
+	IconsetClientUI *d = (IconsetClientUI *)w;
+	const Iconset *is = d->iss_clients->iconset();
+	if (is) {
+		isDetails(*is, parentWidget->parentWidget(), psi);
+	}
+}
+
+void OptionsTabIconsetClients::setData(PsiCon *psicon, QWidget *p)
+{
+	psi = psicon;
+	parentWidget = p;
+}
+
+void OptionsTabIconsetClients::cancelThread()
+{
+	if ( thread ) {
+		threadCancelled.lock();
+		thread->cancelled = true;
+		threadCancelled.unlock();
+
+		thread = 0;
+	}
+}
+
+//----------------------------------------------------------------------------
 // OptionsTabIconsetRoster
 //----------------------------------------------------------------------------
 
diff --git a/src/options/opt_iconset.h b/src/options/opt_iconset.h
index 8745225..a360434 100644
--- a/src/options/opt_iconset.h
+++ b/src/options/opt_iconset.h
@@ -93,6 +93,34 @@ private:
 	IconsetLoadThread *thread;
 };
 
+class OptionsTabIconsetClients : public OptionsTab
+{
+	Q_OBJECT
+public:
+	OptionsTabIconsetClients(QObject *parent);
+	~OptionsTabIconsetClients();
+
+	QWidget *widget();
+	void applyOptions();
+	void restoreOptions();
+	bool stretchable() const { return true; }
+
+private slots:
+	void setData(PsiCon *, QWidget *);
+	void previewIconset();
+
+protected:
+	bool event(QEvent *);
+	void cancelThread();
+
+private:
+	QWidget *w, *parentWidget;
+	PsiCon *psi;
+
+	int numIconsets, iconsetsLoaded;
+	IconsetLoadThread *thread;
+};
+
 class OptionsTabIconsetRoster : public OptionsTab
 {
 	Q_OBJECT
diff --git a/src/options/opt_iconset_client.ui b/src/options/opt_iconset_client.ui
new file mode 100644
index 0000000..27c875d
--- /dev/null
+++ b/src/options/opt_iconset_client.ui
@@ -0,0 +1,88 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<ui version="4.0">
+ <class>IconsetClient</class>
+ <widget class="QWidget" name="IconsetClient">
+  <property name="geometry">
+   <rect>
+    <x>0</x>
+    <y>0</y>
+    <width>256</width>
+    <height>195</height>
+   </rect>
+  </property>
+  <property name="windowTitle">
+   <string>IconsetClientUI</string>
+  </property>
+  <layout class="QVBoxLayout">
+   <property name="spacing">
+    <number>6</number>
+   </property>
+   <property name="margin">
+    <number>9</number>
+   </property>
+   <item>
+    <widget class="QGroupBox" name="groupBox9">
+     <property name="title">
+      <string>Client iconsets</string>
+     </property>
+     <layout class="QGridLayout">
+      <property name="margin">
+       <number>8</number>
+      </property>
+      <property name="spacing">
+       <number>6</number>
+      </property>
+      <item row="1" column="2">
+       <spacer>
+        <property name="orientation">
+         <enum>Qt::Horizontal</enum>
+        </property>
+        <property name="sizeType">
+         <enum>QSizePolicy::Expanding</enum>
+        </property>
+        <property name="sizeHint" stdset="0">
+         <size>
+          <width>204</width>
+          <height>20</height>
+         </size>
+        </property>
+       </spacer>
+      </item>
+      <item row="1" column="3">
+       <widget class="IconButton" name="pb_clientDetails" native="true">
+        <property name="text" stdset="0">
+         <string>&amp;Show Details</string>
+        </property>
+       </widget>
+      </item>
+      <item row="0" column="0" colspan="4">
+       <widget class="IconsetSelect" name="iss_clients" native="true"/>
+      </item>
+     </layout>
+    </widget>
+   </item>
+   <item>
+    <widget class="QProgressBar" name="progress">
+     <property name="orientation">
+      <enum>Qt::Horizontal</enum>
+     </property>
+    </widget>
+   </item>
+  </layout>
+ </widget>
+ <layoutdefault spacing="6" margin="11"/>
+ <customwidgets>
+  <customwidget>
+   <class>IconButton</class>
+   <extends></extends>
+   <header>iconbutton.h</header>
+  </customwidget>
+  <customwidget>
+   <class>IconsetSelect</class>
+   <extends></extends>
+   <header>iconsetselect.h</header>
+  </customwidget>
+ </customwidgets>
+ <resources/>
+ <connections/>
+</ui>
diff --git a/src/options/opt_roster.cpp b/src/options/opt_roster.cpp
index e3ed147..cc8d26c 100644
--- a/src/options/opt_roster.cpp
+++ b/src/options/opt_roster.cpp
@@ -44,7 +44,7 @@ QWidget *OptionsTabRoster::widget()
 	d->ck_showMenubar->setWhatsThis(
 		tr("Shows the menubar in the application window."));
 
-
+	connect(d->ck_showClientIcons, SIGNAL(toggled(bool)), d->cb_showAllClientIcons, SLOT(setEnabled(bool)));
 #ifdef Q_OS_MAC
 	d->ck_alwaysOnTop->hide();
 	d->ck_showMenubar->hide();
@@ -71,6 +71,7 @@ void OptionsTabRoster::applyOptions()
 	PsiOptions::instance()->setOption("options.ui.contactlist.show-mood-icons", d->ck_showMoodIcons->isChecked());
 	PsiOptions::instance()->setOption("options.ui.contactlist.show-tune-icons", d->ck_showTuneIcons->isChecked());
 	PsiOptions::instance()->setOption("options.ui.contactlist.show-client-icons", d->ck_showClientIcons->isChecked());
+	PsiOptions::instance()->setOption("options.ui.contactlist.show-all-client-icons", (d->cb_showAllClientIcons->currentIndex() == 0)?true:false);
 
 	//avatars settings
 	PsiOptions::instance()->setOption("options.ui.contactlist.avatars.size", d->sb_avatarsSize->value());
@@ -96,7 +97,8 @@ void OptionsTabRoster::restoreOptions()
 	d->ck_showMoodIcons->setChecked( PsiOptions::instance()->getOption("options.ui.contactlist.show-mood-icons").toBool() );
 	d->ck_showTuneIcons->setChecked( PsiOptions::instance()->getOption("options.ui.contactlist.show-tune-icons").toBool() );
 	d->ck_showClientIcons->setChecked( PsiOptions::instance()->getOption("options.ui.contactlist.show-client-icons").toBool() );
-
+	d->cb_showAllClientIcons->setEnabled(PsiOptions::instance()->getOption("options.ui.contactlist.show-client-icons").toBool());
+	d->cb_showAllClientIcons->setCurrentIndex(PsiOptions::instance()->getOption("options.ui.contactlist.show-all-client-icons").toBool()?0:1);
 	//avatars settings
 	d->sb_avatarsSize->setValue( PsiOptions::instance()->getOption("options.ui.contactlist.avatars.size").toInt() );
 	d->sb_avatarsRadius->setValue( PsiOptions::instance()->getOption("options.ui.contactlist.avatars.radius").toInt() );
diff --git a/src/options/opt_roster.ui b/src/options/opt_roster.ui
index 9fa822e..1820271 100644
--- a/src/options/opt_roster.ui
+++ b/src/options/opt_roster.ui
@@ -1,4 +1,3 @@
-<?xml version="1.0" encoding="UTF-8"?>
 <ui version="4.0">
  <class>OptRoster</class>
  <widget class="QWidget" name="OptRoster">
@@ -104,6 +103,11 @@
        </widget>
       </item>
       <item>
+       <layout class="QHBoxLayout" >
+        <property name="spacing" >
+         <number>5</number>
+        </property>
+        <item>
        <widget class="QCheckBox" name="ck_showClientIcons">
         <property name="whatsThis">
          <string>Show icon of user client</string>
@@ -113,6 +117,22 @@
         </property>
        </widget>
       </item>
+        <item>
+         <widget class="QComboBox" name="cb_showAllClientIcons" >
+          <item>
+           <property name="text" >
+            <string>all client icons</string>
+           </property>
+          </item>
+          <item>
+           <property name="text" >
+            <string>only highest priority client icon</string>
+           </property>
+          </item>
+         </widget>
+        </item>
+       </layout>
+      </item>
      </layout>
     </widget>
    </item>
@@ -204,5 +224,4 @@
   <tabstop>ck_showTuneIcons</tabstop>
  </tabstops>
  <resources/>
- <connections/>
 </ui>
diff --git a/src/options/options.pri b/src/options/options.pri
index 972e84a..f5468cb 100644
--- a/src/options/options.pri
+++ b/src/options/options.pri
@@ -65,6 +65,7 @@ FORMS += \
 	$$PWD/ui_isdetails.ui \
 	$$PWD/opt_iconset_emo.ui \
 	$$PWD/opt_iconset_mood.ui \
+	$$PWD/opt_iconset_client.ui \
 	$$PWD/opt_iconset_system.ui \
 	$$PWD/opt_iconset_roster.ui \
 	$$PWD/opt_general_groupchat.ui \
diff --git a/src/psiiconset.cpp b/src/psiiconset.cpp
index c43d9d5..effdafb 100644
--- a/src/psiiconset.cpp
+++ b/src/psiiconset.cpp
@@ -30,6 +30,7 @@
 #include <QFileInfo>
 #include <QCoreApplication>
 #include <QSet>
+#include <QTextStream>
 
 using namespace XMPP;
 
@@ -42,8 +43,9 @@ class PsiIconset::Private
 private:
 	PsiIconset *psi;
 public:
-	Iconset system, moods;
-	QString cur_system, cur_status, cur_moods;
+	Iconset system, moods, clients;
+	QMap<QString, QString> caps2clients;
+	QString cur_system, cur_status, cur_moods, cur_clients;
 	QStringList cur_emoticons;
 	QMap<QString, QString> cur_service_status;
 	QMap<QString, QString> cur_custom_status;
@@ -247,6 +249,23 @@ public:
 		return def;
 	}
 
+	Iconset clientsIconset(bool *ok)
+	{
+		Iconset def;
+		*ok = def.load( iconsetPath("clients/default") );
+
+		if ( PsiOptions::instance()->getOption("options.iconsets.clients").toString() != "default" ) {
+			Iconset is;
+			is.load ( iconsetPath("clients/" + PsiOptions::instance()->getOption("options.iconsets.clients").toString()) );
+
+			loadIconset(&def, &is);
+		}
+
+		stripFirstAnimFrame( def );
+
+		return def;
+	}
+
 	QList<Iconset*> emoticons()
 	{
 		QList<Iconset*> emo;
@@ -386,6 +405,52 @@ bool PsiIconset::loadMoods()
 	return ok;
 }
 
+bool PsiIconset::loadClients()
+{
+	bool ok = true;
+	QString cur_clients = PsiOptions::instance()->getOption("options.iconsets.clients").toString();
+	if (d->cur_clients != cur_clients) {
+		Iconset clients = d->clientsIconset(&ok);
+		d->loadIconset(&d->clients, &clients);
+		d->clients.addToFactory();
+
+		QStringList dirs = ApplicationInfo::dataDirs();
+		QMap<QString,QString> cm;
+		foreach (const QString &dataDir, dirs) {
+			QFile capsConv(dataDir + QLatin1String("/caps2client.txt"));
+			/* file format: <icon res name> <left part of cap1>,<left part of cap2>
+				next line the same.
+			*/
+			if (capsConv.open(QIODevice::ReadOnly)) {
+				QTextStream stream(&capsConv);
+
+				QString line;
+				while (!(line = stream.readLine()).isNull()) {
+					line = line.trimmed();
+					QString res = line.section(QLatin1Char(' '), 0, 0);
+					if (!res.length()) {
+						continue;
+					}
+					QString caps = line.mid(res.length());
+					foreach (const QString &c, caps.split(QLatin1Char(','), QString::SkipEmptyParts)) {
+						QString ct = c.trimmed();
+						if (ct.length()) {
+							cm.insert(ct, res);
+						}
+					}
+				}
+				/* insert end boundry element to make search implementation simple */
+				cm.insert(QLatin1String("~"), QLatin1String(""));
+				break;
+			}
+		}
+		d->caps2clients = cm;
+		d->cur_clients = cur_clients;
+	}
+
+	return ok;
+}
+
 bool PsiIconset::loadAll()
 {
 	if (!loadSystem() || !loadRoster())
@@ -393,6 +458,7 @@ bool PsiIconset::loadAll()
 
 	loadEmoticons();
 	loadMoods();
+	loadClients();
 	return true;
 }
 
@@ -407,6 +473,9 @@ void PsiIconset::optionChanged(const QString& option)
 	else if (option == "options.iconsets.moods") {
 		loadMoods();
 	}
+	else if (option == "options.iconsets.clients") {
+		loadClients();
+	}
 
 	// currently we rely on PsiCon calling reloadRoster() when
 	// all options are already applied. otherwise we risk the chance
@@ -734,6 +803,22 @@ void PsiIconset::removeAnimation(Iconset *is)
 	}
 }
 
+QString PsiIconset::caps2client(const QString &name)
+{
+	QMap<QString, QString>::const_iterator it = d->caps2clients.lowerBound(name);
+	if (it == d->caps2clients.end()) {
+		return QString();
+	}
+	if (name.startsWith(it.value())) {
+		return it.key();
+	}
+	it--;
+	if (it != d->caps2clients.end() && name.startsWith(it.value())) {
+		return it.key();
+	}
+	return QString();
+}
+
 PsiIconset* PsiIconset::instance()
 {
 	if (!instance_)
diff --git a/src/psiiconset.h b/src/psiiconset.h
index 04b15ec..f807c25 100644
--- a/src/psiiconset.h
+++ b/src/psiiconset.h
@@ -45,6 +45,7 @@ public:
 	QHash<QString, Iconset*> roster;
 	QList<Iconset*> emoticons;
 	Iconset moods;
+	Iconset clients;
 	const Iconset &system() const;
 	void stripFirstAnimFrame(Iconset *);
 	static void removeAnimation(Iconset *);
@@ -76,6 +77,7 @@ public:
 	PsiIcon *statusPtr(UserListItem *);
 	PsiIcon status(UserListItem *);
 
+	QString caps2client(const QString &name);
 signals:
 	void emoticonsChanged();
 
@@ -97,6 +99,7 @@ private:
 	bool loadRoster();
 	void loadEmoticons();
 	bool loadMoods();
+	bool loadClients();
 };
 
 #endif
diff --git a/src/userlist.cpp b/src/userlist.cpp
index 7d539b3..9e3a99d 100644
--- a/src/userlist.cpp
+++ b/src/userlist.cpp
@@ -31,6 +31,7 @@
 #include "mucmanager.h"
 #include "psioptions.h"
 #include "jidutil.h"
+#include "psiiconset.h"
 
 using namespace XMPP;
 
@@ -282,6 +283,32 @@ const Mood& UserListItem::mood() const
 	return v_mood;
 }
 
+QStringList UserListItem::clients() const
+{
+	QStringList res;
+
+	//if(isMuc()) return res; //temporary commented out until necessary patches will be fixed
+	if(!userResourceList().isEmpty()) {
+		UserResourceList srl = userResourceList();
+		srl.sort();
+
+		for(UserResourceList::ConstIterator rit = srl.begin(); rit != srl.end(); ++rit) {
+			QString name = (*rit).clientName().toLower();
+			res += findClient(name);
+		}
+	}
+	return res;
+}
+
+QString UserListItem::findClient(QString name) const
+{
+	QString res = PsiIconset::instance()->caps2client(name);
+	if (res.isEmpty()) {
+		res = "unknown";
+	}
+	return res;
+}
+
 void UserListItem::setActivity(const Activity& activity)
 {
 	v_activity = activity;
@@ -593,7 +620,7 @@ QString UserListItem::makeBareTip(bool trim, bool doLinkify) const
 				if(trim)
 					ver = dot_truncate(ver, 80);
 				ver = TextUtil::escape(ver);
-				str += QString("<div style='white-space:pre'>") + QObject::tr("Using") + QString(": %1").arg(ver) + "</div>";
+				str += QString("<div style='white-space:pre'>") + QObject::tr("Using") + QString(": <%1=\"%2\"> %3").arg(imgTag).arg("clients/" + findClient(r.clientName().toLower())).arg(ver) + "</div>";
 			}
 
 			// status message
diff --git a/src/userlist.h b/src/userlist.h
index 20a450d..3f491fe 100644
--- a/src/userlist.h
+++ b/src/userlist.h
@@ -117,6 +117,8 @@ public:
 	QString makeDesc() const;
 	bool isPrivate() const;
 	const Mood& mood() const;
+	QStringList clients() const;
+	QString findClient(QString name) const;
 	const Activity& activity() const;
 
 	void setJid(const XMPP::Jid &);
