--- a/options/default.xml
+++ b/options/default.xml
@@ -211,6 +211,7 @@ QLineEdit#le_status_text {
 				<lockdown-roster type="bool">false</lockdown-roster>
 				<raise-on-new-event type="bool">false</raise-on-new-event>
 				<quit-on-close type="bool">false</quit-on-close>
+				<show-roster-avatar-frame type="bool">false</show-roster-avatar-frame>
 				<show>
 					<agent-contacts type="bool">true</agent-contacts>
 					<away-contacts type="bool">true</away-contacts>
@@ -257,6 +258,12 @@ QLineEdit#le_status_text {
 				<saved-window-geometry-screen type="int">0</saved-window-geometry-screen>
 				<saved-window-geometry-maximized type="bool">false</saved-window-geometry-maximized>
 				<saved-window-geometry-fullscreen type="bool">false</saved-window-geometry-fullscreen>
+				<roster-avatar-frame comment="Options for roster avatar frame">
+					<avatar>
+						<size type="int">52</size>
+						<margin type="int">0</margin>
+					</avatar>
+				</roster-avatar-frame>
 			</contactlist>
 			<menu comment="Options for the menu">
 				<account comment="Options for the account-specific menu">
--- a/src/mainwin.cpp
+++ b/src/mainwin.cpp
@@ -78,6 +78,9 @@
 #include "psimedia/psimedia.h"
 #include "avcall/avcall.h"
 
+#include "rosteravatarframe.h"
+#include "avatars.h"
+
 using namespace XMPP;
 
 static const QString showStatusMessagesOptionPath = "options.ui.contactlist.status-messages.show";
@@ -125,6 +128,8 @@ public:
 	EventNotifierAction* eventNotifier;
 	PsiCon* psi;
 	MainWin* mainWin;
+	RosterAvatarFrame* rosterAvatar;
+	QPointer<PsiAccount> defaultAccount;
 
 	QLineEdit* searchText;
 	QToolButton* searchPb;
@@ -306,6 +311,7 @@ MainWin::MainWin(bool _onTop, bool _asTool, PsiCon* psi)
 	d->trayMenu = 0;
 	d->statusTip = "";
 	d->nickname = "";
+	d->defaultAccount = 0;
 
 	QWidget *rosterBar = new QWidget(this);
 	bool allInOne = false;
@@ -398,6 +404,16 @@ MainWin::MainWin(bool _onTop, bool _asTool, PsiCon* psi)
 	d->searchWidget->setVisible(false);
 #endif
 
+
+	// create rosteravatarframe
+	d->rosterAvatar = new RosterAvatarFrame(this);
+	d->vb_roster->addWidget(d->rosterAvatar);
+	d->rosterAvatar->setVisible(PsiOptions::instance()->getOption("options.ui.contactlist.show-roster-avatar-frame").toBool());
+	connect(d->rosterAvatar, SIGNAL(statusMessageChanged(QString)), this, SIGNAL(statusMessageChanged(QString)));
+	connect(psiCon(), SIGNAL(statusMessageChanged(QString)), d->rosterAvatar, SLOT(setStatusMessage(QString)));
+	connect(d->rosterAvatar, SIGNAL(setMood()), this, SLOT(actSetMoodActivated()));
+	connect(d->rosterAvatar, SIGNAL(setActivity()), this, SLOT(actSetActivityActivated()));
+
 	//add contact view
 #ifndef NEWCONTACTLIST
 	d->vb_roster->addWidget(cvlist);
@@ -510,6 +526,7 @@ MainWin::MainWin(bool _onTop, bool _asTool, PsiCon* psi)
 #endif
 	d->optionsButton->setMenu( d->optionsMenu );
 	d->statusButton->setMenu( d->statusMenu );
+	d->rosterAvatar->setStatusMenu( d->statusMenu );
 
 	buildToolbars();
 	// setUnifiedTitleAndToolBarOnMac(true);
@@ -560,6 +577,9 @@ void MainWin::optionChanged(const QString& option)
 			setStyleSheet(css);
 		}
 	}
+	else if (option == "options.ui.contactlist.show-roster-avatar-frame") {
+		d->rosterAvatar->setVisible(PsiOptions::instance()->getOption("options.ui.contactlist.show-roster-avatar-frame").toBool());
+	}
 }
 
 void MainWin::registerAction( IconAction* action )
@@ -1298,6 +1318,7 @@ void MainWin::decorateButton(int status)
 		else {
 			d->statusButton->setIcon(PsiIconset::instance()->statusPtr(STATUS_OFFLINE));
 			d->statusGroup->setPsiIcon(PsiIconset::instance()->statusPtr(STATUS_OFFLINE));
+			d->rosterAvatar->setStatusIcon(PsiIconset::instance()->statusPtr(STATUS_OFFLINE)->icon());
 		}
 
 		setWindowIcon(PsiIconset::instance()->status(STATUS_OFFLINE).impix());
@@ -1306,6 +1327,7 @@ void MainWin::decorateButton(int status)
 		d->statusButton->setText(status2txt(status));
 		d->statusButton->setIcon(PsiIconset::instance()->statusPtr(status));
 		d->statusGroup->setPsiIcon(PsiIconset::instance()->statusPtr(status));
+		d->rosterAvatar->setStatusIcon(PsiIconset::instance()->statusPtr(status)->icon());
 
 		setWindowIcon(PsiIconset::instance()->status(status).impix());
 	}
@@ -1605,6 +1627,38 @@ void MainWin::numAccountsChanged()
 {
 	d->statusButton->setEnabled(d->psi->contactList()->haveEnabledAccounts());
 	setTrayToolTip();
+	PsiAccount *acc = d->psi->contactList()->defaultAccount();
+	if(acc && acc != d->defaultAccount) {
+		if(d->defaultAccount) {
+			disconnect(d->defaultAccount, SIGNAL(nickChanged()), this, SLOT(nickChanged()));
+//			disconnect(d->defaultAccount->avatarFactory(), SIGNAL(avatarChanged(Jid)), this, SLOT(avatarChanged()));
+		}
+		d->defaultAccount = acc;
+		avatarChanged();
+		nickChanged();
+		d->rosterAvatar->setStatusMessage(acc->status().status());
+		connect(acc->avatarFactory(), SIGNAL(avatarChanged(Jid)), this, SLOT(avatarChanged()));
+		connect(acc, SIGNAL(nickChanged()), this, SLOT(nickChanged()));
+	}
+}
+
+void MainWin::nickChanged()
+{
+	if(d->defaultAccount)
+		d->rosterAvatar->setNick(d->defaultAccount->nick());
+}
+
+void MainWin::avatarChanged()
+{
+	if(d->defaultAccount) {
+		QPixmap pix = d->defaultAccount->avatarFactory()->getAvatar(d->defaultAccount->jid());
+		if(pix.isNull())
+			pix = IconsetFactory::iconPixmap("psi/default_avatar");
+		d->rosterAvatar->setAvatar(pix);
+	}
+	else {
+		d->rosterAvatar->setAvatar(IconsetFactory::iconPixmap("psi/default_avatar"));
+	}
 }
 
 void MainWin::accountFeaturesChanged()
--- a/src/mainwin.h
+++ b/src/mainwin.h
@@ -83,6 +83,7 @@ protected:
 
 signals:
 	void statusChanged(int);
+	void statusMessageChanged(QString);
 	void changeProfile();
 	void blankMessage();
 	void closeProgram();
@@ -153,6 +154,9 @@ private slots:
 
 	void optionChanged(const QString&);
 
+	void nickChanged();
+	void avatarChanged();
+
 public slots:
 	void setWindowIcon(const QPixmap&);
 	void showNoFocus();
--- a/src/options/opt_roster.cpp
+++ b/src/options/opt_roster.cpp
@@ -65,6 +65,7 @@ void OptionsTabRoster::applyOptions()
 	PsiOptions::instance()->setOption("options.ui.contactlist.use-left-click", d->ck_useleft->isChecked());
 	PsiOptions::instance()->setOption("options.ui.contactlist.show-menubar", d->ck_showMenubar->isChecked());
 	PsiOptions::instance()->setOption("options.ui.contactlist.disable-scrollbar", d->ck_disableScrollbar->isChecked());
+	PsiOptions::instance()->setOption("options.ui.contactlist.show-roster-avatar-frame", d->ck_roster_avatar->isChecked());
 
 	//enabled icons
 	PsiOptions::instance()->setOption("options.ui.contactlist.avatars.show", d->ck_showAvatarIcons->isChecked());
@@ -93,6 +94,7 @@ void OptionsTabRoster::restoreOptions()
 	d->ck_useleft->setVisible(false);
 	d->ck_showMenubar->setChecked( PsiOptions::instance()->getOption("options.ui.contactlist.show-menubar").toBool() );
 	d->ck_disableScrollbar->setChecked( PsiOptions::instance()->getOption("options.ui.contactlist.disable-scrollbar").toBool() );
+	d->ck_roster_avatar->setChecked( PsiOptions::instance()->getOption("options.ui.contactlist.show-roster-avatar-frame").toBool() );
 
 	//enabled icons
 	d->ck_showAvatarIcons->setChecked( PsiOptions::instance()->getOption("options.ui.contactlist.avatars.show").toBool() );
--- a/src/options/opt_roster.ui
+++ b/src/options/opt_roster.ui
@@ -62,6 +62,16 @@
     </widget>
    </item>
    <item>
+    <widget class="QCheckBox" name="ck_roster_avatar">
+     <property name="whatsThis">
+      <string>Enables avatar frame at the top of roster</string>
+     </property>
+     <property name="text">
+      <string>Enable roster avatar frame</string>
+     </property>
+    </widget>
+   </item>
+   <item>
     <widget class="QGroupBox" name="gb_docklet">
      <property name="title">
       <string>Icons</string>
--- a/src/psicon.cpp
+++ b/src/psicon.cpp
@@ -548,6 +548,7 @@ bool PsiCon::init()
 	connect(d->mainwin, SIGNAL(doGroupChat()), SLOT(doGroupChat()));
 	connect(d->mainwin, SIGNAL(blankMessage()), SLOT(doNewBlankMessage()));
 	connect(d->mainwin, SIGNAL(statusChanged(int)), SLOT(statusMenuChanged(int)));
+	connect(d->mainwin, SIGNAL(statusMessageChanged(QString)), SLOT(setStatusMessage(QString)));
 	connect(d->mainwin, SIGNAL(doOptions()), SLOT(doOptions()));
 	connect(d->mainwin, SIGNAL(doToolbars()), SLOT(doToolbars()));
 	connect(d->mainwin, SIGNAL(doFileTransDlg()), SLOT(doFileTransDlg()));
@@ -682,6 +683,8 @@ bool PsiCon::init()
 	foreach(PsiAccount* account, d->contactList->accounts()) {
 		account->autoLogin();
 	}
+	if(d->contactList->defaultAccount())
+		emit statusMessageChanged(d->contactList->defaultAccount()->status().status());
 
 	// show tip of the day
 	if ( options->getOption("options.ui.tip.show").toBool() ) {
@@ -1132,6 +1135,16 @@ void PsiCon::setGlobalStatus(const Status &s, bool withPriority, bool isManualSt
 	foreach(PsiAccount* account, d->contactList->enabledAccounts())
 		if (allOffline || account->isActive())
 			account->setStatus(s, withPriority, isManualStatus);
+
+	emit statusMessageChanged(s.status());
+}
+
+void PsiCon::setStatusMessage(QString message)
+{
+	XMPP::Status s;
+	s.setType(currentStatusType());
+	s.setStatus(message);
+	setGlobalStatus(s, false, true);
 }
 
 void PsiCon::pa_updatedActivity()
--- a/src/psicon.h
+++ b/src/psicon.h
@@ -139,6 +139,7 @@ signals:
 	void accountActivityChanged();
 	void emitOptionsUpdate();
 	void restoringSavedChatsChanged();
+	void statusMessageChanged(QString);
 
 public slots:
 	void setGlobalStatus(const Status &, bool withPriority = false, bool isManualStatus = false);
@@ -156,6 +157,7 @@ public slots:
 	void doOptions();
 	void doFileTransDlg();
 	void statusMenuChanged(int);
+	void setStatusMessage(QString message);
 	void pa_updatedActivity();
 	void pa_updatedAccount();
 	void slotApplyOptions();
new file mode 100644
--- /dev/null
+++ b/src/rosteravatarframe.cpp
@@ -0,0 +1,148 @@
+/*
+ * rosteravatarframe.cpp
+ * Copyright (C) 2010  Khryukin Evgeny
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License
+ * as published by the Free Software Foundation; either version 2
+ * of the License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
+ *
+ */
+
+#include "rosteravatarframe.h"
+#include "psioptions.h"
+#include "iconset.h"
+#include "qpainter.h"
+
+
+RosterAvatarFrame::RosterAvatarFrame(QWidget *parent)
+	: QFrame(parent)
+	, statusMessage_("")
+{
+	ui_.setupUi(this);
+	layout()->setMargin(PsiOptions::instance()->getOption("options.ui.contactlist.roster-avatar-frame.avatar.margin").toInt());
+	layout()->setSpacing(0);
+	setMoodIcon("mood/");
+	setActivityIcon("activities/other");
+	setFont();
+
+	connect(ui_.le_status_text, SIGNAL(returnPressed()), this, SLOT(statusMessageReturnPressed()));
+	connect(ui_.tb_mood, SIGNAL(pressed()), this, SIGNAL(setMood()));
+	connect(ui_.tb_activity, SIGNAL(pressed()), this, SIGNAL(setActivity()));
+	connect(PsiOptions::instance(), SIGNAL(optionChanged(QString)),this, SLOT(optionChanged(QString)));
+}
+
+void RosterAvatarFrame::setStatusMessage(const QString &message)
+{
+	ui_.le_status_text->setText(message);
+	ui_.le_status_text->setCursorPosition(0);
+	statusMessage_ = message;
+}
+
+void RosterAvatarFrame::setAvatar(const QPixmap &avatar)
+{
+	avatarPixmap = avatar;
+	drawAvatar();
+}
+
+void RosterAvatarFrame::setMoodIcon(const QString &mood)
+{
+	ui_.tb_mood->setIcon(QIcon(IconsetFactory::iconPixmap(mood)));
+}
+
+void RosterAvatarFrame::setActivityIcon(const QString &activity)
+{
+	ui_.tb_activity->setIcon(QIcon(IconsetFactory::iconPixmap(activity)));
+}
+
+void RosterAvatarFrame::drawAvatar()
+{
+	int avSize = PsiOptions::instance()->getOption("options.ui.contactlist.roster-avatar-frame.avatar.size").toInt();
+	QPixmap av = avatarPixmap;
+	if(!av.isNull()) {
+		int radius = PsiOptions::instance()->getOption("options.ui.contactlist.avatars.radius").toInt();
+		if(!radius)
+			av = av.scaled(avSize,avSize, Qt::KeepAspectRatio, Qt::SmoothTransformation);
+		else {
+			avSize = qMax(avSize, radius*2);
+			av = av.scaled(avSize, avSize, Qt::KeepAspectRatio, Qt::SmoothTransformation);
+			int w = av.width(), h = av.height();
+			QPainterPath pp;
+			pp.addRoundedRect(0, 0, w, h, radius, radius);
+			QPixmap avatar_icon = QPixmap(w, h);
+			avatar_icon.fill(QColor(0,0,0,0));
+			QPainter mp(&avatar_icon);
+			mp.setBackgroundMode(Qt::TransparentMode);
+			mp.setRenderHints(QPainter::Antialiasing, true);
+			mp.fillPath(pp, QBrush(av));
+			av = avatar_icon;
+		}
+	}
+	ui_.lb_avatar->setPixmap(av);
+	ui_.lb_avatar->setFixedSize(avSize,avSize);
+}
+
+void RosterAvatarFrame::setStatusIcon(const QIcon &ico)
+{
+	ui_.tb_status->setIcon(ico);
+}
+
+void RosterAvatarFrame::setNick(const QString &nick)
+{
+	ui_.lb_nick->setText(nick);
+}
+
+void RosterAvatarFrame::setFont()
+{
+	QFont f;
+	f.fromString(PsiOptions::instance()->getOption("options.ui.look.font.contactlist").toString());
+	ui_.lb_nick->setFont(f);
+	ui_.le_status_text->setFont(f);
+}
+
+void RosterAvatarFrame::statusMessageReturnPressed()
+{
+	statusMessage_ = ui_.le_status_text->text();
+	ui_.le_status_text->setCursorPosition(0);
+	ui_.lb_nick->setFocus(); //remove focus from lineedit
+	emit statusMessageChanged(statusMessage_);
+}
+
+void RosterAvatarFrame::setStatusMenu(QMenu *menu)
+{
+	statusMenu_ = menu;
+	ui_.tb_status->setMenu(statusMenu_);
+	ui_.tb_status->setPopupMode(QToolButton::InstantPopup);
+}
+
+void RosterAvatarFrame::keyPressEvent(QKeyEvent *e)
+{
+	if(e->key() == Qt::Key_Escape) {
+		ui_.le_status_text->setText(statusMessage_);
+		ui_.le_status_text->setCursorPosition(0);
+		ui_.lb_nick->setFocus(); //remove focus from lineedit
+		e->accept();
+	}
+	else {
+		e->ignore();
+	}
+}
+
+void RosterAvatarFrame::optionChanged(QString option)
+{
+	if(option == "options.ui.contactlist.avatars.radius" or "options.ui.contactlist.roster-avatar-frame.avatar.size")
+		drawAvatar();
+	if (option == "options.ui.look.font.contactlist")
+		setFont();
+	if (option == "options.ui.contactlist.roster-avatar-frame.avatar.margin")
+		layout()->setMargin(PsiOptions::instance()->getOption("options.ui.contactlist.roster-avatar-frame.avatar.margin").toInt());
+}
new file mode 100644
--- /dev/null
+++ b/src/rosteravatarframe.h
@@ -0,0 +1,65 @@
+/*
+ * rosteravatarframe.h
+ * Copyright (C) 2010  Khryukin Evgeny
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License
+ * as published by the Free Software Foundation; either version 2
+ * of the License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
+ *
+ */
+
+#ifndef ROSTERAVATARFRAME_H
+#define ROSTERAVATARFRAME_H
+
+#include "ui_rosteravatarframe.h"
+
+#include <QKeyEvent>
+
+class RosterAvatarFrame : public QFrame
+{
+	Q_OBJECT
+	public:
+		RosterAvatarFrame(QWidget *parent);
+		void setAvatar(const QPixmap &avatar);
+		void setStatusIcon(const QIcon &ico);
+		void setNick(const QString &nick);
+		void setStatusMenu(QMenu *menu);
+
+	signals:
+		void statusMessageChanged(QString);
+		void setMood();
+		void setActivity();
+
+	protected:
+		void keyPressEvent(QKeyEvent *event);
+
+	private slots:
+		void statusMessageReturnPressed();
+		void optionChanged(QString);
+
+	public slots:
+		void setStatusMessage(const QString &message);
+		void setMoodIcon(const QString &mood);
+		void setActivityIcon(const QString &activity);
+
+	private:
+		Ui::RosterAvatarFrame ui_;
+		QString statusMessage_;
+		QMenu *statusMenu_;
+		QPixmap avatarPixmap;
+
+		void drawAvatar();
+		void setFont();
+};
+
+#endif
new file mode 100644
--- /dev/null
+++ b/src/rosteravatarframe.ui
@@ -0,0 +1,165 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<ui version="4.0">
+ <class>RosterAvatarFrame</class>
+ <widget class="QFrame" name="RosterAvatarFrame">
+  <property name="geometry">
+   <rect>
+    <x>0</x>
+    <y>0</y>
+    <width>260</width>
+    <height>81</height>
+   </rect>
+  </property>
+  <property name="maximumSize">
+   <size>
+    <width>16777215</width>
+    <height>81</height>
+   </size>
+  </property>
+  <property name="windowTitle">
+   <string>Form</string>
+  </property>
+  <layout class="QHBoxLayout" name="horizontalLayout_3">
+   <property name="sizeConstraint">
+    <enum>QLayout::SetNoConstraint</enum>
+   </property>
+   <item>
+    <widget class="QLabel" name="lb_avatar">
+     <property name="minimumSize">
+      <size>
+       <width>32</width>
+       <height>32</height>
+      </size>
+     </property>
+     <property name="maximumSize">
+      <size>
+       <width>64</width>
+       <height>64</height>
+      </size>
+     </property>
+     <property name="text">
+      <string/>
+     </property>
+    </widget>
+   </item>
+   <item>
+    <layout class="QVBoxLayout" name="verticalLayout">
+     <item>
+      <layout class="QHBoxLayout" name="horizontalLayout_2">
+       <item>
+        <widget class="QLabel" name="lb_nick">
+         <property name="sizePolicy">
+          <sizepolicy hsizetype="MinimumExpanding" vsizetype="Preferred">
+           <horstretch>0</horstretch>
+           <verstretch>0</verstretch>
+          </sizepolicy>
+         </property>
+         <property name="toolTip">
+          <string>Nick</string>
+         </property>
+         <property name="text">
+          <string/>
+         </property>
+         <property name="alignment">
+          <set>Qt::AlignCenter</set>
+         </property>
+        </widget>
+       </item>
+       <item>
+        <widget class="QToolButton" name="tb_mood">
+         <property name="sizePolicy">
+          <sizepolicy hsizetype="Preferred" vsizetype="Preferred">
+           <horstretch>0</horstretch>
+           <verstretch>0</verstretch>
+          </sizepolicy>
+         </property>
+         <property name="maximumSize">
+          <size>
+           <width>28</width>
+           <height>28</height>
+          </size>
+         </property>
+         <property name="toolTip">
+          <string>Set Mood for all active accounts</string>
+         </property>
+         <property name="text">
+          <string/>
+         </property>
+        </widget>
+       </item>
+       <item>
+        <widget class="QToolButton" name="tb_activity">
+         <property name="sizePolicy">
+          <sizepolicy hsizetype="Preferred" vsizetype="Preferred">
+           <horstretch>0</horstretch>
+           <verstretch>0</verstretch>
+          </sizepolicy>
+         </property>
+         <property name="maximumSize">
+          <size>
+           <width>28</width>
+           <height>28</height>
+          </size>
+         </property>
+         <property name="toolTip">
+          <string>Set Activity for all active accounts</string>
+         </property>
+         <property name="text">
+          <string/>
+         </property>
+        </widget>
+       </item>
+      </layout>
+     </item>
+     <item>
+      <layout class="QHBoxLayout" name="horizontalLayout">
+       <item>
+        <widget class="QToolButton" name="tb_status">
+         <property name="sizePolicy">
+          <sizepolicy hsizetype="Preferred" vsizetype="Preferred">
+           <horstretch>0</horstretch>
+           <verstretch>0</verstretch>
+          </sizepolicy>
+         </property>
+         <property name="maximumSize">
+          <size>
+           <width>28</width>
+           <height>28</height>
+          </size>
+         </property>
+         <property name="toolTip">
+          <string>Set Status for all active accounts</string>
+         </property>
+         <property name="text">
+          <string/>
+         </property>
+        </widget>
+       </item>
+       <item>
+        <widget class="QLineEdit" name="le_status_text">
+         <property name="sizePolicy">
+          <sizepolicy hsizetype="Expanding" vsizetype="Preferred">
+           <horstretch>0</horstretch>
+           <verstretch>0</verstretch>
+          </sizepolicy>
+         </property>
+         <property name="maximumSize">
+          <size>
+           <width>16777215</width>
+           <height>25</height>
+          </size>
+         </property>
+         <property name="toolTip">
+          <string>Status Message</string>
+         </property>
+        </widget>
+       </item>
+      </layout>
+     </item>
+    </layout>
+   </item>
+  </layout>
+ </widget>
+ <resources/>
+ <connections/>
+</ui>
--- a/src/src.pri
+++ b/src/src.pri
@@ -212,7 +212,8 @@ HEADERS += \
 	$$PWD/vcardphotodlg.h \
 	$$PWD/psicli.h \
 	$$PWD/coloropt.h \
-	$$PWD/geolocationdlg.h
+	$$PWD/geolocationdlg.h \
+	$$PWD/rosteravatarframe.h
 
 
 HEADERS += tabcompletion.h
@@ -349,7 +350,8 @@ SOURCES += \
 	$$PWD/bookmarkmanagedlg.cpp \
 	$$PWD/vcardphotodlg.cpp \
 	$$PWD/coloropt.cpp \
-	$$PWD/geolocationdlg.cpp
+	$$PWD/geolocationdlg.cpp \
+	$$PWD/rosteravatarframe.cpp
 
 CONFIG += filetransfer
 filetransfer {
@@ -581,7 +583,8 @@ FORMS += \
 	$$PWD/bookmarkmanage.ui \
 	$$PWD/ahcommanddlg.ui \
 	$$PWD/ahcformdlg.ui \
-	$$PWD/geolocation.ui
+	$$PWD/geolocation.ui \
+	$$PWD/rosteravatarframe.ui
 
 # options dialog
 include($$PWD/options/options.pri)
