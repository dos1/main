--- git.orig/options/default.xml
+++ git/options/default.xml
@@ -112,6 +112,7 @@
 				</avatars>
 				<alert-for-already-open-chats type="bool">true</alert-for-already-open-chats>
 				<auto-popup type="bool">false</auto-popup>
+				<auto-capitalize type="bool">false</auto-capitalize>
 				<delete-contents-after type="QString">never</delete-contents-after>
 				<raise-chat-windows-on-new-messages type="bool">false</raise-chat-windows-on-new-messages>
 				<switch-tab-on-new-messages type="bool">false</switch-tab-on-new-messages>
@@ -609,6 +610,7 @@ QLineEdit#le_status_text {
 				<show-messageFirst type="QKeySequence" comment="Show first message" >Alt+End</show-messageFirst>
 				<show-messageNext type="QKeySequence" comment="Show next message" >Ctrl+Down</show-messageNext>
 				<show-messagePrev type="QKeySequence" comment="Show prev message" >Ctrl+Up</show-messagePrev>
+				<change-case type="QKeySequence" comment="Change case of letters in the chat edit" >Ctrl+Alt+x</change-case>
 				<minimize type="QKeySequence" comment="Minimize active chat window"/>
 			</chat>
 			<contactlist comment="Shortcuts in the contactlist">
--- git.orig/src/msgmle.cpp
+++ git/src/msgmle.cpp
@@ -41,6 +41,126 @@
 #include "psioptions.h"
 #include "htmltextcontroller.h"
 
+#include "qdebug.h"
+
+//----------------------------------------------------------------------------
+// CapitalLettersController
+//----------------------------------------------------------------------------
+
+class CapitalLettersController : public QObject
+{
+	Q_OBJECT
+public:
+	CapitalLettersController(QTextEdit* parent)
+		: QObject()
+		, te_(parent)
+		, enabled_(true)
+	{
+		connect(te_->document(), SIGNAL(contentsChange(int,int,int)), SLOT(textChanged(int,int,int)));
+	}
+
+	virtual ~CapitalLettersController() {};
+
+	void setAutoCapitalizeEnabled(bool enabled)
+	{
+		enabled_ = enabled;
+	}
+
+private:
+	void capitalizeChar(int pos, QChar c)
+	{
+		changeChar(pos, c.toUpper());
+	}
+
+	void decapitalizeChar(int pos, QChar c)
+	{
+		changeChar(pos, c.toLower());
+	}
+
+	void changeChar(int pos, QChar c)
+	{
+		QTextCursor cur = te_->textCursor();
+		cur.setPosition(pos+1);
+		const QTextCharFormat cf = cur.charFormat();
+		cur.deletePreviousChar();
+		cur.setCharFormat(cf);
+		cur.insertText(c);
+	}
+
+public slots:
+	void textChanged(int pos, int /*charsRemoved*/, int charsAdded)
+	{
+		if(enabled_) {
+			if(charsAdded == 0) {
+				return;
+			}
+			if(!te_->textCursor().atEnd()) { //Editing the letter in the middle of the text
+				return;
+			}
+			bool capitalizeNext_ = false;
+
+			if(pos == 0 && charsAdded < 3) { //the first letter after the previous message was sent
+				capitalizeNext_ = true;
+			}
+			else if (charsAdded > 1) { //Insert a piece of text
+				return;
+			}
+			else {
+				QString txt = te_->toPlainText();
+				QRegExp capitalizeAfter("(?:^[^.][.]+\\s+)|(?:\\s*[^.]{2,}[.]+\\s+)|(?:[!?]\\s+)");
+				int index = txt.lastIndexOf(capitalizeAfter);
+				if(index != -1 && index == pos-capitalizeAfter.matchedLength()) {
+					capitalizeNext_ = true;
+				}
+			}
+
+			if(capitalizeNext_) {
+				QChar ch = te_->document()->characterAt(pos);
+				if(!ch.isLetter() || !ch.isLower()) {
+					return;
+				}
+				else {
+					capitalizeChar(pos, ch);
+				}
+			}
+		}
+	}
+
+	void changeCase()
+	{
+		bool tmpEnabled = enabled_;
+		enabled_ = false;
+		QTextCursor oldCur = te_->textCursor();
+		int pos = oldCur.position();
+		int begin = 0;
+		int end = te_->document()->characterCount();
+		if(oldCur.hasSelection()) {
+			begin = oldCur.selectionStart();
+			end = oldCur.selectionEnd();
+		}
+		for(; begin < end; begin++) {
+			QChar ch = te_->document()->characterAt(begin);
+			if(!ch.isLetter()) {
+				continue;
+			}
+
+			if(ch.isLower()) {
+				capitalizeChar(begin, ch);
+			}
+			else {
+				decapitalizeChar(begin, ch);
+			}
+		}
+		oldCur.setPosition(pos);
+		te_->setTextCursor(oldCur);
+		enabled_ = tmpEnabled;
+	}
+
+private:
+	QTextEdit* te_;
+	bool enabled_;
+};
+
 
 //----------------------------------------------------------------------------
 // ChatEdit
@@ -54,6 +174,7 @@ ChatEdit::ChatEdit(QWidget *parent)
 	, palCorrection(palOriginal)
 {
 	controller_ = new HTMLTextController(this);
+	capitalizer_ = new CapitalLettersController(this);
 
 	setWordWrapMode(QTextOption::WordWrap);
 	setAcceptRichText(false);
@@ -70,6 +191,7 @@ ChatEdit::ChatEdit(QWidget *parent)
 	palCorrection.setColor(QPalette::Base, QColor(160, 160, 0));
 	initActions();
 	setShortcuts();
+	optionsChanged();
 }
 
 ChatEdit::~ChatEdit()
@@ -77,6 +199,12 @@ ChatEdit::~ChatEdit()
 	clearMessageHistory();
 	delete spellhighlighter_;
 	delete controller_;
+	delete capitalizer_;
+}
+
+CapitalLettersController * ChatEdit::capitalizer()
+{
+	return capitalizer_;
 }
 
 void ChatEdit::initActions()
@@ -103,6 +231,10 @@ void ChatEdit::initActions()
 	addAction(actPasteAsQuote_);
 	connect(actPasteAsQuote_, SIGNAL(triggered()), SLOT(pasteAsQuote()));
 	connect(clipboard, SIGNAL(dataChanged()), SLOT(changeActPasteAsQuoteState()));
+
+	act_changeCase = new QAction(this);
+	addAction(act_changeCase);
+	connect(act_changeCase, SIGNAL(triggered()), capitalizer_, SLOT(changeCase()));
 }
 
 void ChatEdit::setShortcuts()
@@ -111,6 +243,7 @@ void ChatEdit::setShortcuts()
 	act_showMessageNext->setShortcuts(ShortcutManager::instance()->shortcuts("chat.show-messageNext"));
 	act_showMessageFirst->setShortcuts(ShortcutManager::instance()->shortcuts("chat.show-messageFirst"));
 	act_showMessageLast->setShortcuts(ShortcutManager::instance()->shortcuts("chat.show-messageLast"));
+	act_changeCase->setShortcuts(ShortcutManager::instance()->shortcuts("chat.change-case"));
 }
 
 void ChatEdit::setDialog(QWidget* dialog)
@@ -300,6 +433,7 @@ void ChatEdit::addToDictionary()
 void ChatEdit::optionsChanged()
 {
 	setCheckSpelling(checkSpellingGloballyEnabled());
+	capitalizer_->setAutoCapitalizeEnabled(PsiOptions::instance()->getOption("options.ui.chat.auto-capitalize").toBool());
 }
 
 void ChatEdit::showHistoryMessageNext()
@@ -526,3 +660,5 @@ void LineEdit::updateScrollBar()
 	setVerticalScrollBarPolicy(sizeHint().height() > height() ? Qt::ScrollBarAlwaysOn : Qt::ScrollBarAlwaysOff);
 	ensureCursorVisible();
 }
+
+#include "msgmle.moc"
--- git.orig/src/msgmle.h
+++ git/src/msgmle.h
@@ -34,6 +34,7 @@ class QResizeEvent;
 class QTimer;
 class SpellHighlighter;
 class HTMLTextController;
+class CapitalLettersController;
 
 
 class ChatEdit : public QTextEdit
@@ -60,6 +61,7 @@ public:
 	void setLastMessageId(const QString& id) { lastId = id; }
 	const QString& lastMessageId() { return lastId; }
 	void resetCorrection() { correction = false; updateBackground(); };
+	CapitalLettersController * capitalizer();
 
 public slots:
 	void appendMessageHistory(const QString& text);
@@ -103,9 +105,11 @@ private:
 	QAction* act_showMessageFirst;
 	QAction* act_showMessageLast;
 	QAction *actPasteAsQuote_;
+	QAction *act_changeCase;
 
 	QString currentText;
 	HTMLTextController *controller_;
+	CapitalLettersController *capitalizer_;
 	bool correction;
 	QString lastId;
 	QPalette palOriginal;
