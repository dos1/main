--- git.orig/options/default.xml
+++ git/options/default.xml
@@ -137,6 +137,7 @@
 				<tooltip comment="Display options for the contact list tooltips">
 					<avatar comment="Display avatar" type="bool">true</avatar>
 					<client-version comment="Display client version information" type="bool">true</client-version>
+					<geolocation comment="Display geolocation information" type="bool">true</geolocation>
 					<last-status comment="Display the last status" type="bool">true</last-status>
 					<pgp comment="Display PGP information" type="bool">true</pgp>
 				</tooltip>
@@ -170,6 +171,7 @@
 				</avatars>
 				<show-mood-icons type="bool">true</show-mood-icons>
 				<show-activity-icons type="bool">true</show-activity-icons>
+				<show-geolocation-icons type="bool">true</show-geolocation-icons>
 				<show-tune-icons type="bool">true</show-tune-icons>
 				<show-client-icons type="bool">true</show-client-icons>
 				<show-all-client-icons type="bool">false</show-all-client-icons>
--- git.orig/src/contactlistaccountmenu.cpp
+++ git/src/contactlistaccountmenu.cpp
@@ -39,6 +39,7 @@ class ContactListAccountMenu::Private :
 	StatusMenu* statusMenu_;
 	QAction* moodAction_;
 	QAction* activityAction_;
+	QAction* geolocationAction_;
 	QAction* setAvatarAction_;
 	QMenu* avatarMenu_;
 	QAction* unsetAvatarAction_;
@@ -78,6 +79,9 @@ public:
 		activityAction_ = new QAction(tr("Activity"), this);
 		connect(activityAction_, SIGNAL(triggered()), SLOT(setActivity()));
 
+		geolocationAction_ = new QAction(tr("GeoLocation"), this);
+		connect(geolocationAction_, SIGNAL(triggered()), SLOT(setGeolocation()));
+
 		setAvatarAction_ = new QAction(tr("Set Avatar"), this);
 		connect(setAvatarAction_, SIGNAL(triggered()), SLOT(setAvatar()));
 
@@ -123,6 +127,7 @@ public:
 		menu->addMenu(statusMenu_);
 		menu->addAction(moodAction_);
 		menu->addAction(activityAction_);
+		menu->addAction(geolocationAction_);
 		avatarMenu_ = menu->addMenu(tr("Avatar"));
 		avatarMenu_->addAction(setAvatarAction_);
 		avatarMenu_->addAction(unsetAvatarAction_);
@@ -162,10 +167,12 @@ private slots:
 #ifndef USE_PEP
 		moodAction_->setVisible(false);
 		activityAction_->setVisible(false);
+		geolocationAction_->setVisible(false);
 		avatarMenu_->setVisible(false);
 #else
 		moodAction_->setEnabled(account->account()->serverInfoManager()->hasPEP());
 		activityAction_->setEnabled(account->account()->serverInfoManager()->hasPEP());
+		geolocationAction_->setEnabled(account->account()->serverInfoManager()->hasPEP());
 		avatarMenu_->setEnabled(account->account()->serverInfoManager()->hasPEP());
 #endif
 		bookmarksMenu_->clear();
@@ -226,6 +233,14 @@ private slots:
 		account->account()->actionSetActivity();
 	}
 
+	void setGeolocation()
+	{
+		if (!account)
+			return;
+
+		account->account()->actionSetGeoLocation();
+	}
+
 	void setAvatar()
 	{
 		if (!account)
--- git.orig/src/geolocation.cpp
+++ git/src/geolocation.cpp
@@ -20,6 +20,7 @@
 
 #include <QDomDocument>
 #include <QDomElement>
+#include <QApplication>
 
 #include "geolocation.h"
 
@@ -72,6 +73,56 @@ QDomElement GeoLocation::toXml(QDomDocum
 		e.appendChild(doc.createTextNode(description_));
 		geoloc.appendChild(e);
 	}
+	if (!country_.isEmpty()) {
+		QDomElement e = doc.createElement("country");
+		e.appendChild(doc.createTextNode(country_));
+		geoloc.appendChild(e);
+	}
+	if (!region_.isEmpty()) {
+		QDomElement e = doc.createElement("region");
+		e.appendChild(doc.createTextNode(region_));
+		geoloc.appendChild(e);
+	}
+	if (!locality_.isEmpty()) {
+		QDomElement e = doc.createElement("locality");
+		e.appendChild(doc.createTextNode(locality_));
+		geoloc.appendChild(e);
+	}
+	if (!area_.isEmpty()) {
+		QDomElement e = doc.createElement("area");
+		e.appendChild(doc.createTextNode(area_));
+		geoloc.appendChild(e);
+	}
+	if (!street_.isEmpty()) {
+		QDomElement e = doc.createElement("street");
+		e.appendChild(doc.createTextNode(street_));
+		geoloc.appendChild(e);
+	}
+	if (!building_.isEmpty()) {
+		QDomElement e = doc.createElement("building");
+		e.appendChild(doc.createTextNode(building_));
+		geoloc.appendChild(e);
+	}
+	if (!floor_.isEmpty()) {
+		QDomElement e = doc.createElement("floor");
+		e.appendChild(doc.createTextNode(floor_));
+		geoloc.appendChild(e);
+	}
+	if (!room_.isEmpty()) {
+		QDomElement e = doc.createElement("room");
+		e.appendChild(doc.createTextNode(room_));
+		geoloc.appendChild(e);
+	}
+	if (!postalcode_.isEmpty()) {
+		QDomElement e = doc.createElement("postalcode");
+		e.appendChild(doc.createTextNode(postalcode_));
+		geoloc.appendChild(e);
+	}
+	if (!text_.isEmpty()) {
+		QDomElement e = doc.createElement("text");
+		e.appendChild(doc.createTextNode(text_));
+		geoloc.appendChild(e);
+	}
 
 	return geoloc;
 }
@@ -85,18 +136,38 @@ void GeoLocation::fromXml(const QDomElem
 		QDomElement m = n.toElement();
 		if (m.tagName() == "alt")
 			alt_ = Maybe<float>(m.text().toFloat());
-		if (m.tagName() == "bearing")
+		else if (m.tagName() == "bearing")
 			bearing_ = Maybe<float>(m.text().toFloat());
-		if (m.tagName() == "error")
+		else if (m.tagName() == "error")
 			error_ = Maybe<float>(m.text().toFloat());
-		if (m.tagName() == "lat")
+		else if (m.tagName() == "lat")
 			lat_ = Maybe<float>(m.text().toFloat());
-		if (m.tagName() == "lon")
+		else if (m.tagName() == "lon")
 			lon_ = Maybe<float>(m.text().toFloat());
-		if (m.tagName() == "datum")
+		else if (m.tagName() == "datum")
 			datum_ = m.text();
-		if (m.tagName() == "description")
+		else if (m.tagName() == "description")
 			description_ = m.text();
+		else if (m.tagName() == "country")
+			country_ = m.text();
+		else if (m.tagName() == "region")
+			region_ = m.text();
+		else if (m.tagName() == "locality")
+			locality_ = m.text();
+		else if (m.tagName() == "area")
+			area_ = m.text();
+		else if (m.tagName() == "street")
+			street_ = m.text();
+		else if (m.tagName() == "building")
+			building_ = m.text();
+		else if (m.tagName() == "floor")
+			floor_ = m.text();
+		else if (m.tagName() == "room")
+			room_ = m.text();
+		else if (m.tagName() == "postalcode")
+			postalcode_ = m.text();
+		else if (m.tagName() == "text")
+			text_ = m.text();
 	}
 }
 
@@ -169,9 +240,60 @@ const QString& GeoLocation::description(
 	return description_;
 }
 
+const QString& GeoLocation::country() const
+{
+	return country_;
+}
+
+const QString& GeoLocation::region() const
+{
+	return region_;
+}
+
+const QString& GeoLocation::locality() const
+{
+	return locality_;
+}
+
+const QString& GeoLocation::area() const
+{
+	return area_;
+}
+
+const QString& GeoLocation::street() const
+{
+	return street_;
+}
+
+const QString& GeoLocation::building() const
+{
+	return building_;
+}
+
+const QString& GeoLocation::floor() const
+{
+	return floor_;
+}
+
+const QString& GeoLocation::room() const
+{
+	return room_;
+}
+
+const QString& GeoLocation::postalcode() const
+{
+	return postalcode_;
+}
+
+const QString& GeoLocation::text() const
+{
+	return text_;
+}
+
 bool GeoLocation::isNull() const
 {
-	return !lat_.hasValue() || !lon_.hasValue();
+	return !lat_.hasValue() && !lon_.hasValue() && !alt_.hasValue() && !bearing_.hasValue() && !error_.hasValue() && country_.isNull() && region_.isNull() && locality_.isNull()
+		&& area_.isNull() && street_.isNull() && building_.isNull() && floor_.isNull() && room_.isNull() && postalcode_.isNull() && text_.isNull() && description_.isNull() && datum_.isNull();
 }
 
 bool GeoLocation::operator==(const GeoLocation& o) const
@@ -180,6 +302,13 @@ bool GeoLocation::operator==(const GeoLo
 	bool equal = true;
 	equal = equal && (lat_.hasValue() ? lat_.value() == o.lat().value() : !o.lat().hasValue());
 	equal = equal && (lon_.hasValue() ? lon_.value() == o.lon().value() : !o.lon().hasValue());
+	equal = equal && (alt_.hasValue() ? alt_.value() == o.alt().value() : !o.alt().hasValue());
+	equal = equal && (bearing_.hasValue() ? bearing_.value() == o.bearing().value() : !o.bearing().hasValue());
+	equal = equal && (error_.hasValue() ? error_.value() == o.error().value() : !o.error().hasValue());
+	equal == equal && country() == o.country() && region() == o.region() && locality() == o.locality()
+			&& area() == o.area() && street() == o.street() && datum() == o.datum() && building() == o.building()
+			&& floor() == o.floor() && room() == o.room() && postalcode() == o.postalcode() && text() == o.text()
+			&& description() == o.description();
 	return equal;
 }
 
@@ -187,3 +316,123 @@ bool GeoLocation::operator!=(const GeoLo
 {
 	return !((*this) == o);
 }
+
+void GeoLocation::setCountry(const QString& s)
+{
+	country_ = s;
+}
+
+void GeoLocation::setRegion(const QString& s)
+{
+	region_ = s;
+}
+
+void GeoLocation::setLocality(const QString& s)
+{
+	locality_ = s;
+}
+
+void GeoLocation::setArea(const QString& s)
+{
+	area_ = s;
+}
+
+void GeoLocation::setStreet(const QString& s)
+{
+	street_ = s;
+}
+
+void GeoLocation::setBuilding(const QString& s)
+{
+	building_ = s;
+}
+
+void GeoLocation::setFloor(const QString& s)
+{
+	floor_ = s;
+}
+
+void GeoLocation::setRoom(const QString& s)
+{
+	room_ = s;
+}
+
+void GeoLocation::setPostalcode(const QString& s)
+{
+	postalcode_ = s;
+}
+
+void GeoLocation::setText(const QString& s)
+{
+	text_ = s;
+}
+
+QString GeoLocation::toString() const
+{
+	QString loc;
+
+	if(alt_.hasValue() || lon_.hasValue() || lat_.hasValue()) {
+
+		loc += QObject::tr("Latitude/Longitude/Altitude: ");
+
+		if(lat_.hasValue())
+			loc += QString::number(lat_.value()) + "/";
+		else
+			loc += "0/";
+
+		if(lon_.hasValue())
+			loc += QString::number(lon_.value()) + "/";
+		else
+			loc += "0/";
+
+		if(alt_.hasValue())
+			loc += QString::number(alt_.value());
+		else
+			loc += "0";
+
+	}
+
+	if(bearing_.hasValue())
+		loc += QObject::tr("\nBearing: ") + QString::number(bearing_.value());
+
+	if(error_.hasValue())
+		loc += QObject::tr("\nError: ") + QString::number(error_.value());
+
+	if (!datum().isEmpty())
+		loc += QObject::tr("\nDatum: ") + datum();
+
+	if (!country().isEmpty())
+		loc += QObject::tr("\nCountry: ") + country();
+
+	if (!postalcode().isEmpty())
+		loc += QObject::tr("\nPostalcode: ") + postalcode();
+
+	if (!region().isEmpty())
+		loc += QObject::tr("\nRegion: ") + region();
+
+	if (!locality().isEmpty())
+		loc += QObject::tr("\nLocality: ") + locality();
+
+	if (!area().isEmpty())
+		loc += QObject::tr("\nArea: ") + area();
+
+	if (!street().isEmpty())
+		loc += QObject::tr("\nStreet: ") + street();
+
+	if (!building().isEmpty() && (!area().isEmpty() || !street().isEmpty()))
+		loc += ", " + building();
+
+	if (!floor().isEmpty())
+		loc += QObject::tr("\nFloor: ") + floor();
+
+	if (!room().isEmpty())
+		loc += QObject::tr("\nRoom: ") + room();
+
+	if (!description().isEmpty())
+		loc += QObject::tr("\nDescription: ") + description();
+
+	if (!text().isEmpty())
+		loc += "\n" + text();
+
+	return loc;
+}
--- git.orig/src/geolocationdlg.cpp
+++ git/src/geolocationdlg.cpp
@@ -0,0 +1,166 @@
+/*
+ * geolocationdlg.cpp
+ * Copyright (C) 2009  Khryukin Evgeny
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License
+ * as published by the Free Software Foundation; either version 2
+ * of the License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
+ *
+ */
+
+#include "geolocationdlg.h"
+
+#include "xmpp_pubsubitem.h"
+#include "xmpp_client.h"
+#include "xmpp_task.h"
+#include "psiaccount.h"
+#include "pepmanager.h"
+#include "geolocation.h"
+#include <QLineEdit>
+
+GeoLocationDlg::GeoLocationDlg(PsiAccount* pa) : QDialog(0), pa_(pa)
+{
+	setAttribute(Qt::WA_DeleteOnClose);
+	ui_.setupUi(this);
+	setModal(false);
+	connect(ui_.pb_cancel, SIGNAL(clicked()), SLOT(close()));
+ 	connect(ui_.pb_ok, SIGNAL(clicked()), SLOT(setGeoLocation()));
+	connect(ui_.pb_reset, SIGNAL(clicked()), SLOT(reset()));
+
+	GeoLocation geoloc = pa_->geolocation();
+	if(geoloc.isNull())
+		return;
+
+	if (geoloc.alt().hasValue())
+		ui_.le_altitude->setText(QString::number(geoloc.alt().value()));
+
+	if (!geoloc.area().isEmpty())
+		ui_.le_area->setText(geoloc.area());
+
+	if (geoloc.bearing().hasValue())
+		ui_.le_bearing->setText(QString::number(geoloc.bearing().value()));
+
+	if (!geoloc.building().isEmpty())
+		ui_.le_building->setText(geoloc.building());
+
+	if (!geoloc.country().isEmpty())
+		ui_.le_country->setText(geoloc.country());
+
+	if (!geoloc.datum().isEmpty())
+		ui_.le_datum->setText(geoloc.datum());
+
+	if (!geoloc.description().isEmpty())
+		ui_.le_description->setText(geoloc.description());
+
+	if (geoloc.error().hasValue())
+		ui_.le_error->setText(QString::number(geoloc.error().value()));
+
+	if (!geoloc.floor().isEmpty())
+		ui_.le_floor->setText(geoloc.floor());
+
+	if (geoloc.lat().hasValue())
+		ui_.le_latitude->setText(QString::number(geoloc.lat().value()));
+
+	if (!geoloc.locality().isEmpty())
+		ui_.le_locality->setText(geoloc.locality());
+
+	if (geoloc.lon().hasValue())
+		ui_.le_longitude->setText(QString::number(geoloc.lon().value()));
+
+	if (!geoloc.postalcode().isEmpty())
+		ui_.le_postalcode->setText(geoloc.postalcode());
+
+	if (!geoloc.region().isEmpty())
+		ui_.le_region->setText(geoloc.region());
+
+	if (!geoloc.room().isEmpty())
+		ui_.le_room->setText(geoloc.room());
+
+	if (!geoloc.street().isEmpty())
+		ui_.le_street->setText(geoloc.street());
+
+	if (!geoloc.text().isEmpty())
+		ui_.le_text->setText(geoloc.text());
+}
+
+void GeoLocationDlg::reset()
+{
+	foreach(QLineEdit *le, this->findChildren<QLineEdit*>()) {
+		le->setText("");
+	}
+}
+
+void GeoLocationDlg::setGeoLocation()
+{
+	GeoLocation geoloc;
+
+	if(!ui_.le_altitude->text().isEmpty())
+		geoloc.setAlt(ui_.le_altitude->text().toFloat());
+
+	if(!ui_.le_bearing->text().isEmpty())
+		geoloc.setBearing(ui_.le_bearing->text().toFloat());
+
+	if(!ui_.le_error->text().isEmpty())
+		geoloc.setError(ui_.le_error->text().toFloat());
+
+	if(!ui_.le_latitude->text().isEmpty())
+		geoloc.setLat(ui_.le_latitude->text().toFloat());
+
+	if(!ui_.le_longitude->text().isEmpty())
+		geoloc.setLon(ui_.le_longitude->text().toFloat());
+
+	if(!ui_.le_datum->text().isEmpty())
+		geoloc.setDatum(ui_.le_datum->text());
+
+	if(!ui_.le_description->text().isEmpty())
+		geoloc.setDescription(ui_.le_description->text());
+
+	if(!ui_.le_country->text().isEmpty())
+		geoloc.setCountry(ui_.le_country->text());
+
+	if(!ui_.le_region->text().isEmpty())
+		geoloc.setRegion(ui_.le_region->text());
+
+	if(!ui_.le_locality->text().isEmpty())
+		geoloc.setLocality(ui_.le_locality->text());
+
+	if(!ui_.le_area->text().isEmpty())
+		geoloc.setArea(ui_.le_area->text());
+
+	if(!ui_.le_street->text().isEmpty())
+		geoloc.setStreet(ui_.le_street->text());
+
+	if(!ui_.le_building->text().isEmpty())
+		geoloc.setBuilding(ui_.le_building->text());
+
+	if(!ui_.le_floor->text().isEmpty())
+		geoloc.setFloor(ui_.le_floor->text());
+
+	if(!ui_.le_room->text().isEmpty())
+		geoloc.setRoom(ui_.le_room->text());
+
+	if(!ui_.le_postalcode->text().isEmpty())
+		geoloc.setPostalcode(ui_.le_postalcode->text());
+
+	if(!ui_.le_text->text().isEmpty())
+		geoloc.setText(ui_.le_text->text());
+
+	if (geoloc.isNull()) {
+ 		pa_->pepManager()->retract("http://jabber.org/protocol/geoloc", "current");
+	}
+	else {
+		pa_->pepManager()->publish("http://jabber.org/protocol/geoloc", PubSubItem("current",geoloc.toXml(*pa_->client()->rootTask()->doc())), PEPManager::PresenceAccess);
+	}
+	close();
+}
+
--- git.orig/src/geolocationdlg.h
+++ git/src/geolocationdlg.h
@@ -0,0 +1,45 @@
+/*
+ * geolocationdlg.h
+ * Copyright (C) 2009  Khryukin Evgeny
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License
+ * as published by the Free Software Foundation; either version 2
+ * of the License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
+ */
+
+#ifndef GEOLOCATIONDLG_H
+#define GEOLOCATIONDLG_H
+
+#include <QDialog>
+
+#include "ui_geolocation.h"
+
+class PsiAccount;
+
+class GeoLocationDlg : public QDialog
+{
+	Q_OBJECT
+
+public:
+	GeoLocationDlg(PsiAccount*);
+
+protected slots:
+	void setGeoLocation();
+	void reset();
+
+private:
+	Ui::GeoLocation ui_;
+ 	PsiAccount* pa_;
+};
+
+#endif // GEOLOCATIONDLG_H
--- git.orig/src/geolocation.h
+++ git/src/geolocation.h
@@ -52,7 +52,30 @@ public:
 	void setDatum(const QString&);
 	void setDescription(const QString&);
 
+	const QString& country() const;
+	const QString& region() const;
+	const QString& locality() const;
+	const QString& area() const;
+	const QString& street() const;
+	const QString& building() const;
+	const QString& floor() const;
+	const QString& room() const;
+	const QString& postalcode() const;
+	const QString& text() const;
+
+	void setCountry(const QString& s);
+ 	void setRegion(const QString& s);
+	void setLocality(const QString& s);
+	void setArea(const QString& s);
+	void setStreet(const QString& s);
+	void setBuilding(const QString& s);
+	void setFloor(const QString& s);
+	void setRoom(const QString& s);
+	void setPostalcode(const QString& s);
+	void setText(const QString& s);
+
 	QDomElement toXml(QDomDocument&);
+	QString toString() const;
 
 	bool operator==(const GeoLocation&) const;
 	bool operator!=(const GeoLocation&) const;
@@ -63,6 +86,7 @@ protected:
 private:
 	Maybe<float> alt_, bearing_, error_, lat_, lon_;
 	QString datum_, description_;
+	QString country_, region_, locality_, area_, street_, building_, floor_, room_, postalcode_, text_;
 };
 
 #endif
--- git.orig/src/geolocation.ui
+++ git/src/geolocation.ui
@@ -0,0 +1,320 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<ui version="4.0">
+ <class>GeoLocation</class>
+ <widget class="QDialog" name="GeoLocation">
+  <property name="geometry">
+   <rect>
+    <x>0</x>
+    <y>0</y>
+    <width>400</width>
+    <height>533</height>
+   </rect>
+  </property>
+  <property name="sizePolicy">
+   <sizepolicy hsizetype="Preferred" vsizetype="Fixed">
+    <horstretch>0</horstretch>
+    <verstretch>0</verstretch>
+   </sizepolicy>
+  </property>
+  <property name="windowTitle">
+   <string>Set GeoLocation</string>
+  </property>
+  <layout class="QVBoxLayout" name="verticalLayout">
+   <item>
+    <layout class="QGridLayout" name="gridLayout" columnstretch="0,0">
+     <item row="0" column="0">
+      <widget class="QLabel" name="lb_altitude">
+       <property name="text">
+        <string>Altitude:</string>
+       </property>
+      </widget>
+     </item>
+     <item row="0" column="1">
+      <widget class="QLineEdit" name="le_altitude">
+       <property name="toolTip">
+        <string>Altitude in meters above or below sea level</string>
+       </property>
+      </widget>
+     </item>
+     <item row="1" column="0">
+      <widget class="QLabel" name="lb_area">
+       <property name="text">
+        <string>Area:</string>
+       </property>
+      </widget>
+     </item>
+     <item row="1" column="1">
+      <widget class="QLineEdit" name="le_area">
+       <property name="toolTip">
+        <string>A named area such as a campus or neighborhood</string>
+       </property>
+      </widget>
+     </item>
+     <item row="2" column="0">
+      <widget class="QLabel" name="lb_bearing">
+       <property name="text">
+        <string>Bearing:</string>
+       </property>
+      </widget>
+     </item>
+     <item row="2" column="1">
+      <widget class="QLineEdit" name="le_bearing">
+       <property name="toolTip">
+        <string>GPS bearing (direction in which the entity is heading to reach its next waypoint), measured in decimal degrees relative to true north</string>
+       </property>
+      </widget>
+     </item>
+     <item row="3" column="0">
+      <widget class="QLabel" name="lb_building">
+       <property name="text">
+        <string>Building:</string>
+       </property>
+      </widget>
+     </item>
+     <item row="3" column="1">
+      <widget class="QLineEdit" name="le_building">
+       <property name="toolTip">
+        <string>A specific building on a street or in an area</string>
+       </property>
+      </widget>
+     </item>
+     <item row="4" column="0">
+      <widget class="QLabel" name="lb_country">
+       <property name="text">
+        <string>Country:</string>
+       </property>
+      </widget>
+     </item>
+     <item row="4" column="1">
+      <widget class="QLineEdit" name="le_country">
+       <property name="toolTip">
+        <string>The nation where the user is located</string>
+       </property>
+      </widget>
+     </item>
+     <item row="5" column="0">
+      <widget class="QLabel" name="lb_datum">
+       <property name="text">
+        <string>Datum:</string>
+       </property>
+      </widget>
+     </item>
+     <item row="5" column="1">
+      <widget class="QLineEdit" name="le_datum">
+       <property name="toolTip">
+        <string>GPS datum</string>
+       </property>
+      </widget>
+     </item>
+     <item row="6" column="0">
+      <widget class="QLabel" name="lb_description">
+       <property name="text">
+        <string>Description:</string>
+       </property>
+      </widget>
+     </item>
+     <item row="6" column="1">
+      <widget class="QLineEdit" name="le_description">
+       <property name="toolTip">
+        <string>A natural-language name for or description of the location</string>
+       </property>
+      </widget>
+     </item>
+     <item row="7" column="0">
+      <widget class="QLabel" name="lb_error">
+       <property name="text">
+        <string>Error:</string>
+       </property>
+      </widget>
+     </item>
+     <item row="7" column="1">
+      <widget class="QLineEdit" name="le_error">
+       <property name="toolTip">
+        <string>Horizontal GPS error in arc minutes; this element is deprecated in favor of &lt;accuracy/&gt;</string>
+       </property>
+      </widget>
+     </item>
+     <item row="8" column="0">
+      <widget class="QLabel" name="lb_floor">
+       <property name="text">
+        <string>Floor:</string>
+       </property>
+      </widget>
+     </item>
+     <item row="8" column="1">
+      <widget class="QLineEdit" name="le_floor">
+       <property name="toolTip">
+        <string>A particular floor in a building</string>
+       </property>
+      </widget>
+     </item>
+     <item row="9" column="0">
+      <widget class="QLabel" name="lb_latitude">
+       <property name="text">
+        <string>Latitude:</string>
+       </property>
+      </widget>
+     </item>
+     <item row="9" column="1">
+      <widget class="QLineEdit" name="le_latitude">
+       <property name="toolTip">
+        <string>Latitude in decimal degrees North</string>
+       </property>
+      </widget>
+     </item>
+     <item row="10" column="0">
+      <widget class="QLabel" name="lb_locality">
+       <property name="text">
+        <string>Locality:</string>
+       </property>
+      </widget>
+     </item>
+     <item row="10" column="1">
+      <widget class="QLineEdit" name="le_locality">
+       <property name="toolTip">
+        <string>A locality within the administrative region, such as a town or city</string>
+       </property>
+      </widget>
+     </item>
+     <item row="11" column="0">
+      <widget class="QLabel" name="lb_longitude">
+       <property name="text">
+        <string>Longitude:</string>
+       </property>
+      </widget>
+     </item>
+     <item row="11" column="1">
+      <widget class="QLineEdit" name="le_longitude">
+       <property name="toolTip">
+        <string>Longitude in decimal degrees East</string>
+       </property>
+      </widget>
+     </item>
+     <item row="12" column="0">
+      <widget class="QLabel" name="lb_postalcode">
+       <property name="text">
+        <string>Postalcode:</string>
+       </property>
+      </widget>
+     </item>
+     <item row="12" column="1">
+      <widget class="QLineEdit" name="le_postalcode">
+       <property name="toolTip">
+        <string>A code used for postal delivery</string>
+       </property>
+      </widget>
+     </item>
+     <item row="13" column="0">
+      <widget class="QLabel" name="lb_region">
+       <property name="text">
+        <string>Region:</string>
+       </property>
+      </widget>
+     </item>
+     <item row="13" column="1">
+      <widget class="QLineEdit" name="le_region">
+       <property name="toolTip">
+        <string>An administrative region of the nation, such as a state or province</string>
+       </property>
+      </widget>
+     </item>
+     <item row="14" column="0">
+      <widget class="QLabel" name="lb_room">
+       <property name="text">
+        <string>Room:</string>
+       </property>
+      </widget>
+     </item>
+     <item row="14" column="1">
+      <widget class="QLineEdit" name="le_room">
+       <property name="toolTip">
+        <string>A particular room in a building</string>
+       </property>
+      </widget>
+     </item>
+     <item row="15" column="0">
+      <widget class="QLabel" name="lb_street">
+       <property name="text">
+        <string>Street:</string>
+       </property>
+      </widget>
+     </item>
+     <item row="15" column="1">
+      <widget class="QLineEdit" name="le_street">
+       <property name="toolTip">
+        <string>A thoroughfare within the locality, or a crossing of two thoroughfares</string>
+       </property>
+      </widget>
+     </item>
+     <item row="16" column="0">
+      <widget class="QLabel" name="lb_text">
+       <property name="text">
+        <string>Text:</string>
+       </property>
+      </widget>
+     </item>
+     <item row="16" column="1">
+      <widget class="QLineEdit" name="le_text">
+       <property name="toolTip">
+        <string>A catch-all element that captures any other information about the location</string>
+       </property>
+      </widget>
+     </item>
+    </layout>
+   </item>
+   <item>
+    <spacer name="verticalSpacer">
+     <property name="orientation">
+      <enum>Qt::Vertical</enum>
+     </property>
+     <property name="sizeHint" stdset="0">
+      <size>
+       <width>0</width>
+       <height>0</height>
+      </size>
+     </property>
+    </spacer>
+   </item>
+   <item>
+    <layout class="QHBoxLayout">
+     <item>
+      <widget class="QPushButton" name="pb_reset">
+       <property name="text">
+        <string>Reset</string>
+       </property>
+      </widget>
+     </item>
+     <item>
+      <spacer>
+       <property name="orientation">
+        <enum>Qt::Horizontal</enum>
+       </property>
+       <property name="sizeHint" stdset="0">
+        <size>
+         <width>0</width>
+         <height>0</height>
+        </size>
+       </property>
+      </spacer>
+     </item>
+     <item>
+      <widget class="QPushButton" name="pb_ok">
+       <property name="text">
+        <string>OK</string>
+       </property>
+      </widget>
+     </item>
+     <item>
+      <widget class="QPushButton" name="pb_cancel">
+       <property name="text">
+        <string>Cancel</string>
+       </property>
+      </widget>
+     </item>
+    </layout>
+   </item>
+  </layout>
+ </widget>
+ <resources/>
+ <connections/>
+</ui>
--- git.orig/src/options/opt_roster.cpp
+++ git/src/options/opt_roster.cpp
@@ -70,6 +70,7 @@ void OptionsTabRoster::applyOptions()
 	PsiOptions::instance()->setOption("options.ui.contactlist.avatars.show", d->ck_showAvatarIcons->isChecked());
 	PsiOptions::instance()->setOption("options.ui.contactlist.show-mood-icons", d->ck_showMoodIcons->isChecked());
 	PsiOptions::instance()->setOption("options.ui.contactlist.show-activity-icons", d->ck_showActivityIcons->isChecked());
+	PsiOptions::instance()->setOption("options.ui.contactlist.show-geolocation-icons", d->ck_showGeoLocationIcons->isChecked());
 	PsiOptions::instance()->setOption("options.ui.contactlist.show-tune-icons", d->ck_showTuneIcons->isChecked());
 	PsiOptions::instance()->setOption("options.ui.contactlist.show-client-icons", d->ck_showClientIcons->isChecked());
 	PsiOptions::instance()->setOption("options.ui.contactlist.show-all-client-icons", (d->cb_showAllClientIcons->currentIndex() == 0)?true:false);
@@ -97,6 +98,7 @@ void OptionsTabRoster::restoreOptions()
 	d->ck_showAvatarIcons->setChecked( PsiOptions::instance()->getOption("options.ui.contactlist.avatars.show").toBool() );
 	d->ck_showMoodIcons->setChecked( PsiOptions::instance()->getOption("options.ui.contactlist.show-mood-icons").toBool() );
 	d->ck_showActivityIcons->setChecked( PsiOptions::instance()->getOption("options.ui.contactlist.show-activity-icons").toBool() );
+	d->ck_showGeoLocationIcons->setChecked( PsiOptions::instance()->getOption("options.ui.contactlist.show-geolocation-icons").toBool() );
 	d->ck_showTuneIcons->setChecked( PsiOptions::instance()->getOption("options.ui.contactlist.show-tune-icons").toBool() );
 	d->ck_showClientIcons->setChecked( PsiOptions::instance()->getOption("options.ui.contactlist.show-client-icons").toBool() );
 	d->cb_showAllClientIcons->setEnabled(PsiOptions::instance()->getOption("options.ui.contactlist.show-client-icons").toBool());
--- git.orig/src/options/opt_roster.ui
+++ git/src/options/opt_roster.ui
@@ -7,7 +7,7 @@
     <x>0</x>
     <y>0</y>
     <width>357</width>
-    <height>452</height>
+    <height>481</height>
    </rect>
   </property>
   <property name="windowTitle">
@@ -97,6 +97,16 @@
         </property>
        </widget>
       </item>
+      <item>
+       <widget class="QCheckBox" name="ck_showGeoLocationIcons">
+        <property name="whatsThis">
+         <string>Show geolocation in roster</string>
+        </property>
+        <property name="text">
+         <string>GeoLocation</string>
+        </property>
+       </widget>
+      </item>
       <item>
        <widget class="QCheckBox" name="ck_showTuneIcons">
         <property name="whatsThis">
--- git.orig/src/physicallocation.cpp
+++ git/src/physicallocation.cpp
@@ -17,7 +17,7 @@
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
  *
  */
-
+/*
 #include <QDomDocument>
 #include <QDomElement>
 #include <QStringList>
@@ -268,3 +268,5 @@ QString PhysicalLocation::toString() con
 
 	return str;
 }
+
+*/
--- git.orig/src/physicallocation.h
+++ git/src/physicallocation.h
@@ -17,7 +17,7 @@
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
  *
  */
-
+/*
 #ifndef PHYSICALOCATION_H
 #define PHYSICALOCATION_H
 
@@ -69,3 +69,4 @@ private:
 };
 
 #endif
+*/
--- git.orig/src/psiaccount.cpp
+++ git/src/psiaccount.cpp
@@ -119,8 +119,8 @@
 #include "mooddlg.h"
 #include "activitydlg.h"
 #include "qwextend.h"
-#include "geolocation.h"
-#include "physicallocation.h"
+#include "geolocationdlg.h"
+//#include "physicallocation.h"
 #include "translationmanager.h"
 #include "irisprotocol/iris_discoinfoquerier.h"
 #include "iconwidget.h"
@@ -1248,7 +1248,7 @@ PsiAccount::PsiAccount(const UserAccount
 		pepNodes += "http://jabber.org/protocol/mood+notify";
 		pepNodes += "http://jabber.org/protocol/activity+notify";
 		pepNodes += "http://jabber.org/protocol/tune+notify";
-		pepNodes += "http://jabber.org/protocol/physloc+notify";
+	//	pepNodes += "http://jabber.org/protocol/physloc+notify";
 		pepNodes += "http://jabber.org/protocol/geoloc+notify";
 		pepNodes += "urn:xmpp:avatar:metadata+notify";
 		d->client->addExtension("ep-notify-2",Features(pepNodes));
@@ -2253,7 +2253,7 @@ void PsiAccount::setPEPAvailable(bool b)
 		pepNodes += "http://jabber.org/protocol/mood";
 		pepNodes += "http://jabber.org/protocol/activity";
 		pepNodes += "http://jabber.org/protocol/tune";
-		pepNodes += "http://jabber.org/protocol/physloc";
+	//	pepNodes += "http://jabber.org/protocol/physloc";
 		pepNodes += "http://jabber.org/protocol/geoloc";
 		pepNodes += "urn:xmpp:avatar:data";
 		pepNodes += "urn:xmpp:avatar:metadata";
@@ -3448,14 +3448,14 @@ void PsiAccount::itemRetracted(const Jid
 			cpUpdate(*u);
 		}
 	}
-	else if (n == "http://jabber.org/protocol/physloc") {
+	/*else if (n == "http://jabber.org/protocol/physloc") {
 		// FIXME: try to find the right resource using JEP-33 'replyto'
 		// see tune case above
 		foreach(UserListItem* u, findRelevant(j)) {
 			u->setPhysicalLocation(PhysicalLocation());
 			cpUpdate(*u);
 		}
-	}
+	}*/
 }
 
 void PsiAccount::itemPublished(const Jid& j, const QString& n, const PubSubItem& item)
@@ -3508,7 +3508,7 @@ void PsiAccount::itemPublished(const Jid
 			cpUpdate(*u);
 		}
 	}
-	else if (n == "http://jabber.org/protocol/physloc") {
+	/*else if (n == "http://jabber.org/protocol/physloc") {
 		// FIXME: try to find the right resource using JEP-33 'replyto'
 		// see tune case above
 		PhysicalLocation physloc(item.payload());
@@ -3516,7 +3516,7 @@ void PsiAccount::itemPublished(const Jid
 			u->setPhysicalLocation(physloc);
 			cpUpdate(*u);
 		}
-	}
+	}*/
 }
 
 QList<UserListItem*> PsiAccount::findRelevant(const Jid &j) const
@@ -3840,6 +3840,12 @@ void PsiAccount::actionSetActivity()
 	w->show();
 }
 
+void PsiAccount::actionSetGeoLocation()
+{
+	GeoLocationDlg *w = new GeoLocationDlg(this);
+	w->show();
+}
+
 void PsiAccount::actionSetAvatar()
 {
 	QString str = FileUtil::getImageFileName(0);
@@ -5581,6 +5587,11 @@ const Activity &PsiAccount::activity() c
 	return d->self.activity();
 }
 
+const GeoLocation &PsiAccount::geolocation() const
+{
+	return d->self.geoLocation();
+}
+
 const Mood &PsiAccount::mood() const
 {
 	return d->self.mood();
--- git.orig/src/psiaccount.h
+++ git/src/psiaccount.h
@@ -35,6 +35,7 @@
 #include "psievent.h"
 #include "mood.h"
 #include "activity.h"
+#include "geolocation.h"
 
 namespace XMPP
 {
@@ -153,6 +154,7 @@ public:
 	QString nick() const;
 	const Mood &mood() const;
 	const Activity &activity() const;
+	const GeoLocation &geolocation() const;
 	void forceDisconnect(bool fast, const XMPP::Status &s);
 	bool hasPGP() const;
 	QHostAddress *localAddress() const;
@@ -364,6 +366,7 @@ public slots:
 	void actionExecuteCommandSpecific(const Jid&, const QString& = QString());
 	void actionSetMood();
 	void actionSetActivity();
+	void actionSetGeoLocation();
 	void actionSetAvatar();
 	void actionUnsetAvatar();
 	void actionQueryVersion(const Jid& j);
--- git.orig/src/psicon.cpp
+++ git/src/psicon.cpp
@@ -612,7 +612,7 @@ bool PsiCon::init()
 				 << "http://jabber.org/protocol/mood"
 				 << "http://jabber.org/protocol/activity"
 				 << "http://jabber.org/protocol/tune"
-				 << "http://jabber.org/protocol/physloc"
+				// << "http://jabber.org/protocol/physloc"
 				 << "http://jabber.org/protocol/geoloc"
 				 << "urn:xmpp:avatar:data"
 				 << "urn:xmpp:avatar:metadata"
@@ -622,7 +622,7 @@ bool PsiCon::init()
 				 << "http://jabber.org/protocol/mood+notify"
 				 << "http://jabber.org/protocol/activity+notify"
 				 << "http://jabber.org/protocol/tune+notify"
-				 << "http://jabber.org/protocol/physloc+notify"
+				// << "http://jabber.org/protocol/physloc+notify"
 				 << "http://jabber.org/protocol/geoloc+notify"
 				 << "urn:xmpp:avatar:metadata+notify"
 				);
--- git.orig/src/src.pri
+++ git/src/src.pri
@@ -208,6 +208,7 @@ HEADERS += \
 	$$PWD/vcardphotodlg.h \
 	$$PWD/psicli.h \
 	$$PWD/coloropt.h \
+	$$PWD/geolocationdlg.h \
 	$$PWD/sendbuttonmenu.h
 
 
@@ -346,6 +347,7 @@ SOURCES += \
 	$$PWD/bookmarkmanagedlg.cpp \
 	$$PWD/vcardphotodlg.cpp \
 	$$PWD/coloropt.cpp \
+	$$PWD/geolocationdlg.cpp \
 	$$PWD/sendbuttonmenu.cpp
 
 
@@ -579,6 +581,7 @@ FORMS += \
 	$$PWD/bookmarkmanage.ui \
 	$$PWD/ahcommanddlg.ui \
 	$$PWD/ahcformdlg.ui \
+	$$PWD/geolocation.ui \
 	$$PWD/sendbuttontemplateseditor.ui
 
 # options dialog
--- git.orig/src/userlist.cpp
+++ git/src/userlist.cpp
@@ -189,7 +189,7 @@ const GeoLocation& UserResource::geoLoca
 	return v_geoLocation;
 }
 
-void UserResource::setPhysicalLocation(const PhysicalLocation& physicalLocation)
+/*void UserResource::setPhysicalLocation(const PhysicalLocation& physicalLocation)
 {
 	v_physicalLocation = physicalLocation;
 }
@@ -197,7 +197,7 @@ void UserResource::setPhysicalLocation(c
 const PhysicalLocation& UserResource::physicalLocation() const
 {
 	return v_physicalLocation;
-}
+}*/
 
 
 bool operator<(const UserResource &r1, const UserResource &r2)
@@ -706,7 +706,7 @@ const GeoLocation& UserListItem::geoLoca
 	return v_geoLocation;
 }
 
-void UserListItem::setPhysicalLocation(const PhysicalLocation& physicalLocation)
+/*void UserListItem::setPhysicalLocation(const PhysicalLocation& physicalLocation)
 {
 	v_physicalLocation = physicalLocation;
 }
@@ -714,7 +714,7 @@ void UserListItem::setPhysicalLocation(c
 const PhysicalLocation& UserListItem::physicalLocation() const
 {
 	return v_physicalLocation;
-}
+}*/
 
 void UserListItem::setAvatarFactory(AvatarFactory* av)
 {
@@ -889,12 +889,12 @@ QString UserListItem::makeBareTip(bool t
 		str += QString("<div style='white-space:pre'>") + QObject::tr("Listening to") + ": " + TextUtil::escape(tune()) + "</div>";
 
 	// User Physical Location
-	if (!physicalLocation().isNull())
-		str += QString("<div style='white-space:pre'>") + QObject::tr("Location") + ": " + TextUtil::escape(physicalLocation().toString()) + "</div>";
+	//if (!physicalLocation().isNull())
+	//	str += QString("<div style='white-space:pre'>") + QObject::tr("Location") + ": " + TextUtil::escape(physicalLocation().toString()) + "</div>";
 
 	// User Geolocation
-	if (!geoLocation().isNull())
-		str += QString("<div style='white-space:pre'>") + QObject::tr("Geolocation") + ": " + QString::number(geoLocation().lat().value()) + "/" + QString::number(geoLocation().lon().value()) + "</div>";
+	if (!geoLocation().isNull() && PsiOptions::instance()->getOption("options.ui.contactlist.tooltip.geolocation").toBool())
+		str += QString("<div style='white-space:pre'>") + TextUtil::escape(geoLocation().toString()) + "</div>";
 
 	// resources
 	if(!userResourceList().isEmpty()) {
@@ -979,12 +979,12 @@ QString UserListItem::makeBareTip(bool t
 				str += QString("<div style='white-space:pre'>") + QObject::tr("Listening to") + ": " + TextUtil::escape(r.tune()) + "</div>";
 
 			// User Physical Location
-			if (!r.physicalLocation().isNull())
-				str += QString("<div style='white-space:pre'>") + QObject::tr("Location") + ": " + TextUtil::escape(r.physicalLocation().toString()) + "</div>";
+		//	if (!r.physicalLocation().isNull())
+		//		str += QString("<div style='white-space:pre'>") + QObject::tr("Location") + ": " + TextUtil::escape(r.physicalLocation().toString()) + "</div>";
 
 			// User Geolocation
-			if (!r.geoLocation().isNull())
-				str += QString("<div style='white-space:pre'>") + QObject::tr("Geolocation") + ": " + QString::number(r.geoLocation().lat().value()) + "/" + QString::number(r.geoLocation().lon().value()) + "</div>";
+			if (!r.geoLocation().isNull() && PsiOptions::instance()->getOption("options.ui.contactlist.tooltip.geolocation").toBool())
+				str += QString("<div style='white-space:pre'>") + TextUtil::escape(geoLocation().toString()) + "</div>";
 
 			// Entity Time
 			if (r.timezoneOffset().hasValue()) {
--- git.orig/src/userlist.h
+++ git/src/userlist.h
@@ -30,7 +30,7 @@
 #include "mood.h"
 #include "activity.h"
 #include "geolocation.h"
-#include "physicallocation.h"
+//#include "physicallocation.h"
 #include "maybe.h"
 
 class AvatarFactory;
@@ -68,8 +68,8 @@ public:
 	const QString& tune() const;
 	void setGeoLocation(const GeoLocation&);
 	const GeoLocation& geoLocation() const;
-	void setPhysicalLocation(const PhysicalLocation&);
-	const PhysicalLocation& physicalLocation() const;
+	//void setPhysicalLocation(const PhysicalLocation&);
+	//const PhysicalLocation& physicalLocation() const;
 
 private:
 	QString v_ver, v_clientName, v_clientVersion, v_clientOS, v_keyID;
@@ -77,7 +77,7 @@ private:
 	QString v_tzoString;
 	QString v_tune;
 	GeoLocation v_geoLocation;
-	PhysicalLocation v_physicalLocation;
+	//PhysicalLocation v_physicalLocation;
 	int v_pgpVerifyStatus;
 	QDateTime sigts;
 };
@@ -139,8 +139,8 @@ public:
 	const QString& tune() const;
 	void setGeoLocation(const GeoLocation&);
 	const GeoLocation& geoLocation() const;
-	void setPhysicalLocation(const PhysicalLocation&);
-	const PhysicalLocation& physicalLocation() const;
+	//void setPhysicalLocation(const PhysicalLocation&);
+	//const PhysicalLocation& physicalLocation() const;
 	void setAvatarFactory(AvatarFactory*);
 
 	UserResourceList & userResourceList();
@@ -169,7 +169,7 @@ private:
 	Activity v_activity;
 	QString v_tune;
 	GeoLocation v_geoLocation;
-	PhysicalLocation v_physicalLocation;
+	//PhysicalLocation v_physicalLocation;
 	AvatarFactory* v_avatarFactory;
 };
 
