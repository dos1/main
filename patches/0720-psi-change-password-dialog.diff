--- git.orig/src/miniclient.cpp
+++ git/src/miniclient.cpp
@@ -258,11 +258,12 @@ void MiniClient::cs_error(int err)
 {
 	QString str;
 	bool reconn;
+	bool badPass;
 	bool disableAutoConnect;
 	bool isAuthError;
 	bool isTemporaryAuthFailure;
 
-	PsiAccount::getErrorInfo(err, conn, stream, tlsHandler, &str, &reconn, &disableAutoConnect, &isAuthError, &isTemporaryAuthFailure);
+	PsiAccount::getErrorInfo(err, conn, stream, tlsHandler, &str, &reconn, &badPass, &disableAutoConnect, &isAuthError, &isTemporaryAuthFailure);
 	close();
 
 	QMessageBox::critical(0, tr("Server Error"), tr("There was an error communicating with the XMPP server.\nDetails: %1").arg(str));
--- git.orig/src/passdialog.cpp
+++ git/src/passdialog.cpp
@@ -0,0 +1,77 @@
+/*
+ * passdialog.cpp
+ * Copyright (C) 2009-2010 Virnik, 2011 Khryukin Evgeny
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License
+ * as published by the Free Software Foundation; either version 2
+ * of the License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
+ *
+ */
+
+#include <QCheckBox>
+#include <QLabel>
+#include <QLayout>
+#include <QLineEdit>
+#include <QPushButton>
+#include <QHBoxLayout>
+#include <QVBoxLayout>
+
+#include "passdialog.h"
+
+
+PassDialog::PassDialog(const QString& jid, QWidget *parent)
+	: QDialog(parent)
+{
+	setWindowTitle(tr("Wrong Account Password"));
+
+	QVBoxLayout *mainLayout = new QVBoxLayout(this);
+	mainLayout->setMargin(6);
+	mainLayout->setSpacing(6);
+	QHBoxLayout *botLayout = new QHBoxLayout();
+
+	le_password = new QLineEdit();
+	le_password->setEchoMode(QLineEdit::Password);
+
+	cb_savePassword = new QCheckBox(tr("Save Password"));
+	botLayout->addWidget(cb_savePassword);
+	botLayout->addStretch(1);
+
+	QPushButton *pb_ok = new QPushButton(tr("OK"));
+	pb_ok->setDefault(true);
+	botLayout->addWidget(pb_ok);
+
+	QPushButton *pb_cancel = new QPushButton(tr("Cancel"));
+	botLayout->addWidget(pb_cancel);
+
+	mainLayout->addWidget(new QLabel(tr("Please enter your password for %1:").arg(jid)));
+	mainLayout->addWidget(le_password);
+	mainLayout->addLayout(botLayout);
+
+	connect(pb_cancel, SIGNAL(clicked()), this, SLOT(reject()));
+	connect(pb_ok, SIGNAL(clicked()), this, SLOT(accept()));
+}
+
+bool PassDialog::savePassword() const
+{
+	return cb_savePassword->isChecked();
+}
+
+void PassDialog::setSavePassword(bool save)
+{
+	cb_savePassword->setChecked(save);
+}
+
+QString PassDialog::password() const
+{
+	return le_password->text();
+}
--- git.orig/src/passdialog.h
+++ git/src/passdialog.h
@@ -0,0 +1,44 @@
+/*
+ * passdialog.cpp
+ * Copyright (C) 2009-2010 Virnik, 2011 Khryukin Evgeny
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License
+ * as published by the Free Software Foundation; either version 2
+ * of the License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
+ *
+ */
+
+#ifndef PASSDIALOG_H
+#define PASSDIALOG_H
+
+#include <QDialog>
+
+class QCheckBox;
+class QLineEdit;
+
+class PassDialog : public QDialog
+{
+	Q_OBJECT
+public:
+	PassDialog(const QString& jid = "", QWidget *parent = 0);
+
+	QString password() const;
+	bool savePassword() const;
+	void setSavePassword(bool save);
+
+private:
+	QCheckBox *cb_savePassword;
+	QLineEdit *le_password;
+};
+
+#endif
--- git.orig/src/psiaccount.cpp
+++ git/src/psiaccount.cpp
@@ -135,6 +135,7 @@
 #include "rc.h"
 #include "tabdlg.h"
 #include "proxy.h"
+#include "passdialog.h"
 #include "timeserver.h"
 #include "bobfilecache.h"
 #include "psicontactlist.h"
@@ -1964,10 +1965,11 @@ void PsiAccount::cs_warning(int w)
 	}
 }
 
-void PsiAccount::getErrorInfo(int err, AdvancedConnector *conn, Stream *stream, QCATLSHandler *tlsHandler, QString *_str, bool *_reconn, bool *_disableAutoConnect, bool *_isAuthError, bool *_isTemporaryAuthFailure)
+void PsiAccount::getErrorInfo(int err, AdvancedConnector *conn, Stream *stream, QCATLSHandler *tlsHandler, QString *_str, bool *_reconn, bool *_badPass, bool *_disableAutoConnect, bool *_isAuthError, bool *_isTemporaryAuthFailure)
 {
 	QString str;
 	bool reconn = false;
+	bool badPass = false;
 	bool disableAutoConnect = false;
 	bool isAuthError = false;
 	bool isTemporaryAuthFailure = false;
@@ -2102,8 +2104,9 @@ void PsiAccount::getErrorInfo(int err, A
 		} else if(x == XMPP::ClientStream::MechTooWeak) {
 			s = tr("SASL mechanism too weak for this account");
 		} else if(x == XMPP::ClientStream::NotAuthorized) {
-			s = tr("Not authorized");
-			isAuthError = true;
+			s = tr("Wrong Password");
+			badPass = true;
+//			isAuthError = true;
 		} else if(x == XMPP::ClientStream::TemporaryAuthFailure) {
 			s = tr("Temporary auth failure");
 			isAuthError = true;
@@ -2121,6 +2124,7 @@ void PsiAccount::getErrorInfo(int err, A
 	//printf("str[%s], reconn=%d\n", str.latin1(), reconn);
 	*_str = str;
 	*_reconn = reconn;
+	*_badPass = badPass;
 	*_disableAutoConnect = disableAutoConnect;
 	*_isAuthError = isAuthError;
 	*_isTemporaryAuthFailure = isTemporaryAuthFailure;
@@ -2130,13 +2134,14 @@ void PsiAccount::cs_error(int err)
 {
 	QString str;
 	bool reconn;
+	bool badPass;
 	bool isAuthError;
 	bool isTemporaryAuthFailure;
 
 	if (!isActive()) return; // all cleaned up already
 
 	bool disableAutoConnect;
-	getErrorInfo(err, d->conn, d->stream, d->tlsHandler, &str, &reconn, &disableAutoConnect, &isAuthError, &isTemporaryAuthFailure);
+	getErrorInfo(err, d->conn, d->stream, d->tlsHandler, &str, &reconn, &badPass, &disableAutoConnect, &isAuthError, &isTemporaryAuthFailure);
 	if (err != RECONNECT_TIMEOUT_ERROR) {
 		d->currentConnectionError = str;
 		d->currentConnectionErrorCondition = -1;
@@ -2178,7 +2183,7 @@ void PsiAccount::cs_error(int err)
 	presenceSent = false; // this stops the idle detector?? (FIXME)
 
 	// Auto-Reconnect?
-	if(d->acc.opt_reconn && reconn) {
+	if(d->acc.opt_reconn && reconn && !badPass) {
 		isDisconnecting = false;
 		d->startReconnect();
 		return;
@@ -2190,6 +2195,12 @@ void PsiAccount::cs_error(int err)
 	emit disconnected();
 	isDisconnecting = false;
 
+	//If a password failure, prompt for correct password
+	if (badPass) {
+			passwordPrompt();
+			return;
+	}
+
 	QString title;
 	if (d->psi->contactList()->enabledAccounts().count() > 1) {
 		title = QString("%1: ").arg(name());
@@ -2886,21 +2897,13 @@ void PsiAccount::setStatus(const Status
 
 		// if client is not active then attempt to login
 		if(!isActive()) {
-			Jid j = d->jid;
-
-			if(!j.isValid()) {
-				QMessageBox::information(0, CAP(tr("Error")), tr("Unable to login.  Ensure your account information is filled out."));
-				modify();
-				return;
+			if (!d->acc.opt_pass && !d->acc.storeSaltedHashedPassword) {
+				passwordPrompt();
 			}
-
-			if(!d->acc.opt_pass && !d->acc.storeSaltedHashedPassword) {
-				// will call back to us later
-				new AccountLoginPassword(this);
-			} else {
+			else
 				login();
-			}
 		}
+
 		// change status
 		else {
 			if (!isConnected()) {
@@ -2949,6 +2952,19 @@ int PsiAccount::defaultPriority(const XM
 	return d->acc.defaultPriority(s);
 }
 
+void PsiAccount::passwordPrompt()
+{
+	PassDialog dialog(d->jid.full());
+	dialog.setSavePassword(d->acc.opt_pass);
+
+	if(dialog.exec() == QDialog::Accepted && !dialog.password().isEmpty()) {
+		d->acc.pass = dialog.password();
+		d->acc.opt_pass = dialog.savePassword();
+		login();
+	}
+}
+
+
 void PsiAccount::setStatusDirect(const Status &_s, bool withPriority)
 {
 	Status s = _s;
--- git.orig/src/psiaccount.h
+++ git/src/psiaccount.h
@@ -251,7 +251,7 @@ public:
 	bool ensureKey(const Jid &);
 	void tryVerify(UserListItem *, UserResource *);
 
-	static void getErrorInfo(int err, AdvancedConnector *conn, Stream *stream, QCATLSHandler *tlsHandler, QString *_str, bool *_reconn, bool *_disableAutoConnect, bool *_isAuthError, bool *_isTemporaryAuthFailure);
+	static void getErrorInfo(int err, AdvancedConnector *conn, Stream *stream, QCATLSHandler *tlsHandler, QString *_str, bool *_reconn, bool *_badPass, bool *_disableAutoConnect, bool *_isAuthError, bool *_isTemporaryAuthFailure);
 
 	void deleteQueueFile();
 	void sendFiles(const Jid&, const QStringList&, bool direct = false);
@@ -513,6 +513,7 @@ private:
 	void processEncryptedMessageNext();
 	void processEncryptedMessageDone();
 	void verifyStatus(const Jid &j, const Status &s);
+	inline void passwordPrompt();
 	void sentInitialPresence();
 	void requestAvatarsForAllContacts();
 
--- git.orig/src/src.pri
+++ git/src/src.pri
@@ -187,6 +187,7 @@ HEADERS += \
 	$$PWD/pepmanager.h \
 	$$PWD/pubsubsubscription.h \
 	$$PWD/rc.h \
+	$$PWD/passdialog.h \
 	$$PWD/psihttpauthrequest.h \
 	$$PWD/httpauthmanager.h \
 	$$PWD/ahcommand.h \
@@ -330,6 +331,7 @@ SOURCES += \
 	$$PWD/pepmanager.cpp \
 	$$PWD/pubsubsubscription.cpp \
 	$$PWD/rc.cpp \
+	$$PWD/passdialog.cpp \
 	$$PWD/httpauthmanager.cpp \
 	$$PWD/ahcommand.cpp \
 	$$PWD/ahcommandserver.cpp \
