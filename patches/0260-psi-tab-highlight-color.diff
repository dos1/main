--- git.orig/src/chatdlg.cpp
+++ git/src/chatdlg.cpp
@@ -1131,9 +1131,15 @@ void ChatDlg::chatEditCreated()
 
 TabbableWidget::State ChatDlg::state() const
 {
-	return contactChatState_ == XMPP::StateComposing ?
-		   TabbableWidget::StateComposing :
-		   TabbableWidget::StateNone;
+	TabbableWidget::State state = TabbableWidget::StateNone;
+	if(contactChatState_ == XMPP::StateComposing) {
+		state = TabbableWidget::StateComposing;
+	}
+	else if(unreadMessageCount()) {
+		state = TabbableWidget::StateHighlighted;
+	}
+
+	return state;
 }
 
 int ChatDlg::unreadMessageCount() const
--- git.orig/src/groupchatdlg.cpp
+++ git/src/groupchatdlg.cpp
@@ -1991,7 +1991,7 @@ void GCMainDlg::chatEditCreated()
 
 TabbableWidget::State GCMainDlg::state() const
 {
-	return TabbableWidget::StateNone;
+	return d->hPending ? TabbableWidget::StateHighlighted : TabbableWidget::StateNone;
 }
 
 int GCMainDlg::unreadMessageCount() const
--- git.orig/src/tabs/tabbablewidget.h
+++ git/src/tabs/tabbablewidget.h
@@ -63,7 +63,8 @@ public:
 
 	enum State {
 		StateNone = 0,
-		StateComposing
+		StateComposing,
+		StateHighlighted
 	};
 	virtual State state() const = 0;
 	virtual int unreadMessageCount() const = 0;
--- git.orig/src/tabs/tabdlg.cpp
+++ git/src/tabs/tabdlg.cpp
@@ -654,17 +654,25 @@ void TabDlg::updateTab(TabbableWidget* c
 	tabWidget_->setTabText(chat, captionForTab(chat));
 	//now set text colour based upon whether there are new messages/composing etc
 
-	if (chat->state() == TabbableWidget::StateComposing) {
+	TabbableWidget::State state = chat->state();
+	if (state == TabbableWidget::StateComposing) {
 		tabWidget_->setTabTextColor(chat, PsiOptions::instance()->getOption("options.ui.look.colors.chat.composing-color").value<QColor>());
 		tabWidget_->setTabIcon(chat, IconsetFactory::iconPtr("psi/typing")->icon());
 	}
-	else if (chat->unreadMessageCount()) {
-		tabWidget_->setTabTextColor(chat, PsiOptions::instance()->getOption("options.ui.look.colors.chat.unread-message-color").value<QColor>());
-		tabWidget_->setTabIcon(chat, IconsetFactory::iconPtr("psi/chat")->icon());
-	}
 	else {
-		tabWidget_->setTabTextColor(chat, palette().color(QPalette::Text));
-		tabWidget_->setTabIcon(chat, chat->icon());
+		if (state == TabbableWidget::StateHighlighted) {
+			tabWidget_->setTabTextColor(chat, PsiOptions::instance()->getOption("options.ui.look.colors.chat.unread-message-color").value<QColor>());
+		}
+		else {
+			tabWidget_->setTabTextColor(chat, palette().color(QPalette::Text));
+		}
+
+		if(chat->unreadMessageCount()) {
+			tabWidget_->setTabIcon(chat, IconsetFactory::iconPtr("psi/chat")->icon());
+		}
+		else {
+			tabWidget_->setTabIcon(chat, chat->icon());
+		}
 	}
 	updateCaption();
 }
