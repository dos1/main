--- git.temp.orig/src/groupchatdlg.cpp
+++ git.temp/src/groupchatdlg.cpp
@@ -1462,6 +1462,7 @@ void GCMainDlg::presence(const QString &
 			// Status change
 			if ( !d->connecting && options_->getOption("options.muc.show-role-affiliation").toBool() ) {
 				QString message;
+				QString reason;
 				if (contact->s.mucItem().role() != s.mucItem().role() && s.mucItem().role() != MUCItem::NoRole) {
 					if (contact->s.mucItem().affiliation() != s.mucItem().affiliation()) {
 						message = tr("%1 is now %2 and %3").arg(nick).arg(MUCManager::roleToString(s.mucItem().role(),true)).arg(MUCManager::affiliationToString(s.mucItem().affiliation(),true));
@@ -1469,9 +1470,15 @@ void GCMainDlg::presence(const QString &
 					else {
 						message = tr("%1 is now %2").arg(nick).arg(MUCManager::roleToString(s.mucItem().role(),true));
 					}
+					reason = s.mucItem().reason();
 				}
 				else if (contact->s.mucItem().affiliation() != s.mucItem().affiliation()) {
 					message += tr("%1 is now %2").arg(nick).arg(MUCManager::affiliationToString(s.mucItem().affiliation(),true));
+					reason = s.mucItem().reason();
+				}
+
+				if(!reason.isEmpty()) {
+					message += tr(" (Reason: %1)").arg(reason);
 				}
 
 				if (!message.isEmpty()) {
@@ -1923,20 +1930,45 @@ void GCMainDlg::lv_action(const QString
 		GCUserViewItem *contact = (GCUserViewItem*) ui_.lv_users->findEntry(nick);
 		d->mucManager->ban(contact->s.mucItem().jid());
 	}
-	else if(x == 12) {
-		GCUserViewItem *contact = (GCUserViewItem*) ui_.lv_users->findEntry(nick);
-		if (contact->s.mucItem().role() != MUCItem::Visitor)
-			d->mucManager->setRole(nick, MUCItem::Visitor);
-	}
-	else if(x == 13) {
-		GCUserViewItem *contact = (GCUserViewItem*) ui_.lv_users->findEntry(nick);
-		if (contact->s.mucItem().role() != MUCItem::Participant)
-			d->mucManager->setRole(nick, MUCItem::Participant);
-	}
-	else if(x == 14) {
+	else if(x > 11 && x < 19) {
+		MUCReasonsEditor editor(this);
+		QString reason;
+		if (editor.exec())
+			reason = editor.reason();
+		else return;
 		GCUserViewItem *contact = (GCUserViewItem*) ui_.lv_users->findEntry(nick);
-		if (contact->s.mucItem().role() != MUCItem::Moderator)
-			d->mucManager->setRole(nick, MUCItem::Moderator);
+		if (!contact)
+			return;
+		switch(x) {
+		case 12:
+			if (contact->s.mucItem().role() != MUCItem::Visitor)
+				d->mucManager->setRole(nick, MUCItem::Visitor, reason);
+			break;
+		case 13:
+			if (contact->s.mucItem().role() != MUCItem::Participant)
+				d->mucManager->setRole(nick, MUCItem::Participant, reason);
+			break;
+		case 14:
+			if (contact->s.mucItem().role() != MUCItem::Moderator)
+				d->mucManager->setRole(nick, MUCItem::Moderator, reason);
+			break;
+		case 15:
+			if (contact->s.mucItem().affiliation() != MUCItem::NoAffiliation)
+				d->mucManager->setAffiliation(contact->s.mucItem().jid(), MUCItem::NoAffiliation, reason);
+			break;
+		case 16:
+			if (contact->s.mucItem().affiliation() != MUCItem::Member)
+				d->mucManager->setAffiliation(contact->s.mucItem().jid(), MUCItem::Member, reason);
+			break;
+		case 17:
+			if (contact->s.mucItem().affiliation() != MUCItem::Admin)
+				d->mucManager->setAffiliation(contact->s.mucItem().jid(), MUCItem::Admin, reason);
+			break;
+		case 18:
+			if (contact->s.mucItem().affiliation() != MUCItem::Owner)
+				d->mucManager->setAffiliation(contact->s.mucItem().jid(), MUCItem::Owner, reason);
+			break;
+		}
 	}
 	else if(x >= 100 && x<300) {
 		// Kick || Ban with reason
@@ -1964,26 +1996,6 @@ void GCMainDlg::lv_action(const QString
 		}
 
 	}
-	else if(x == 15) {
-		GCUserViewItem *contact = (GCUserViewItem*) ui_.lv_users->findEntry(nick);
-		if (contact->s.mucItem().affiliation() != MUCItem::NoAffiliation)
-			d->mucManager->setAffiliation(contact->s.mucItem().jid(), MUCItem::NoAffiliation);
-	}
-	else if(x == 16) {
-		GCUserViewItem *contact = (GCUserViewItem*) ui_.lv_users->findEntry(nick);
-		if (contact->s.mucItem().affiliation() != MUCItem::Member)
-			d->mucManager->setAffiliation(contact->s.mucItem().jid(), MUCItem::Member);
-	}
-	else if(x == 17) {
-		GCUserViewItem *contact = (GCUserViewItem*) ui_.lv_users->findEntry(nick);
-		if (contact->s.mucItem().affiliation() != MUCItem::Admin)
-			d->mucManager->setAffiliation(contact->s.mucItem().jid(), MUCItem::Admin);
-	}
-	else if(x == 18) {
-		GCUserViewItem *contact = (GCUserViewItem*) ui_.lv_users->findEntry(nick);
-		if (contact->s.mucItem().affiliation() != MUCItem::Owner)
-			d->mucManager->setAffiliation(contact->s.mucItem().jid(), MUCItem::Owner);
-	}
 }
 
 void GCMainDlg::contextMenuEvent(QContextMenuEvent *)
--- git.temp.orig/src/mucreasonseditor.cpp
+++ git.temp/src/mucreasonseditor.cpp
@@ -1,48 +1,82 @@
+/*
+ * mucreasonseditor.cpp
+ * Copyright (C)
+ * 2011 Khryukin Evgeny
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License
+ * as published by the Free Software Foundation; either version 2
+ * of the License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
+ *
+ */
+
 #include "mucreasonseditor.h"
 #include "common.h"
 #include "psioptions.h"
+#include "ui_mucreasonseditor.h"
 
 
 MUCReasonsEditor::MUCReasonsEditor(QWidget* parent)
 	: QDialog(parent)
+	, ui_(new Ui::MUCReasonsEditor)
 {
-	ui_.setupUi(this);
-	ui_.lstReasons->addItems(PsiOptions::instance()->getOption("options.muc.reasons").toStringList());
+	ui_->setupUi(this);
+	ui_->lstReasons->addItems(PsiOptions::instance()->getOption("options.muc.reasons").toStringList());
+
+	connect(ui_->btnAdd, SIGNAL(clicked()), SLOT(addButtonClicked()));
+	connect(ui_->btnRemove, SIGNAL(clicked()), SLOT(removeButtonClicked()));
+	connect(ui_->lstReasons, SIGNAL(currentTextChanged(QString)), SLOT(currentChanged(QString)));
 }
 
 MUCReasonsEditor::~MUCReasonsEditor()
 {
+	delete ui_;
 }
 
 void MUCReasonsEditor::accept()
 {
 	save();
-	reason_=ui_.txtReason->text();
+	reason_ = ui_->txtReason->text();
 	QDialog::accept();
 }
 
-void MUCReasonsEditor::on_btnAdd_clicked()
+void MUCReasonsEditor::currentChanged(const QString &r)
+{
+	ui_->txtReason->setText(r);
+}
+
+void MUCReasonsEditor::addButtonClicked()
 {
-	reason_=ui_.txtReason->text().trimmed();
+	reason_ = ui_->txtReason->text().trimmed();
 	if (reason_.isEmpty())
 		return;
-	ui_.lstReasons->addItem(reason_);
+	ui_->lstReasons->addItem(reason_);
 }
 
-void MUCReasonsEditor::on_btnRemove_clicked()
+void MUCReasonsEditor::removeButtonClicked()
 {
-	int idx=ui_.lstReasons->currentRow();
-	if (idx>=0) {
-		QListWidgetItem *item =ui_.lstReasons->takeItem(idx);
-		if (item) delete item;
+	int idx = ui_->lstReasons->currentRow();
+	if (idx >= 0) {
+		QListWidgetItem *item =ui_->lstReasons->takeItem(idx);
+		if (item)
+			delete item;
 	}
 }
 
 void MUCReasonsEditor::save()
 {
 	QStringList reasons;
-	int cnt=ui_.lstReasons->count();
-	for (int i=0; i<cnt; ++i)
-		reasons.append(ui_.lstReasons->item(i)->text());
+	int cnt = ui_->lstReasons->count();
+	for (int i = 0; i < cnt; ++i)
+		reasons.append(ui_->lstReasons->item(i)->text());
 	PsiOptions::instance()->setOption("options.muc.reasons", reasons);
 }
--- git.temp.orig/src/mucreasonseditor.h
+++ git.temp/src/mucreasonseditor.h
@@ -1,9 +1,32 @@
+/*
+ * mucreasonseditor.cpp
+ * Copyright (C)
+ * 2011 Khryukin Evgeny
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License
+ * as published by the Free Software Foundation; either version 2
+ * of the License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
+ *
+ */
+
 #ifndef MUCREASONSEDITOR_H
 #define MUCREASONSEDITOR_H
 
 #include <QDialog>
 
-#include "ui_mucreasonseditor.h"
+namespace Ui {
+	class MUCReasonsEditor;
+}
 
 class MUCReasonsEditor: public QDialog
 {
@@ -12,13 +35,17 @@ public:
 	MUCReasonsEditor(QWidget* parent = 0);
 	~MUCReasonsEditor();
 	QString reason() const { return reason_; }
+
 private:
-	Ui::MUCReasonsEditor ui_;
+	Ui::MUCReasonsEditor *ui_;
 	QString reason_;
+
 private slots:
-	void on_btnAdd_clicked();
-	void on_btnRemove_clicked();
+	void addButtonClicked();
+	void removeButtonClicked();
 	void save();
+	void currentChanged(const QString&);
+
 protected slots:
 	void accept();
 };
